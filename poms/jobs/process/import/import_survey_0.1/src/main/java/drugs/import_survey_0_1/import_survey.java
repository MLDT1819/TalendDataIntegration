// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package drugs.import_survey_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: import_survey Purpose: Import the survey results<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class import_survey implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "import_survey";
	private final String projectName = "DRUGS";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					import_survey.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(import_survey.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplace_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tConvertType_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNormalize_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDenormalizeSortedRow_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tExtractDelimitedFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplace_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tConvertType_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tNormalize_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_8_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row22_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row24_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSortRow_1_SortOut_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tSortRow_1_SortIn_error(exception, errorComponent, globalMap);

	}

	public void tSortRow_1_SortIn_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out2Struct implements
			routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer UserID;

		public Integer getUserID() {
			return this.UserID;
		}

		public int drugNumber;

		public int getDrugNumber() {
			return this.drugNumber;
		}

		public String DrugUsages;

		public String getDrugUsages() {
			return this.DrugUsages;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.UserID == null) ? 0 : this.UserID.hashCode());

				result = prime * result + (int) this.drugNumber;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out2Struct other = (out2Struct) obj;

			if (this.UserID == null) {
				if (other.UserID != null)
					return false;

			} else if (!this.UserID.equals(other.UserID))

				return false;

			if (this.drugNumber != other.drugNumber)
				return false;

			return true;
		}

		public void copyDataTo(out2Struct other) {

			other.UserID = this.UserID;
			other.drugNumber = this.drugNumber;
			other.DrugUsages = this.DrugUsages;

		}

		public void copyKeysDataTo(out2Struct other) {

			other.UserID = this.UserID;
			other.drugNumber = this.drugNumber;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.UserID = readInteger(dis);

					this.drugNumber = dis.readInt();

					this.DrugUsages = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.UserID, dos);

				// int

				dos.writeInt(this.drugNumber);

				// String

				writeString(this.DrugUsages, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("UserID=" + String.valueOf(UserID));
			sb.append(",drugNumber=" + String.valueOf(drugNumber));
			sb.append(",DrugUsages=" + DrugUsages);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.UserID, other.UserID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.drugNumber,
					other.drugNumber);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String DrugUsages;

		public String getDrugUsages() {
			return this.DrugUsages;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.DrugUsages = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.DrugUsages, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",DrugUsages=" + DrugUsages);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String DrugUsages;

		public String getDrugUsages() {
			return this.DrugUsages;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.ID = this.ID;
			other.DrugUsages = this.DrugUsages;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.DrugUsages = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.DrugUsages, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",DrugUsages=" + DrugUsages);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String DrugUsages;

		public String getDrugUsages() {
			return this.DrugUsages;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.ID = this.ID;
			other.DrugUsages = this.DrugUsages;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.DrugUsages = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.DrugUsages, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",DrugUsages=" + DrugUsages);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Alcohol;

		public String getAlcohol() {
			return this.Alcohol;
		}

		public String Amphet;

		public String getAmphet() {
			return this.Amphet;
		}

		public String Amyl;

		public String getAmyl() {
			return this.Amyl;
		}

		public String Benzos;

		public String getBenzos() {
			return this.Benzos;
		}

		public String Caff;

		public String getCaff() {
			return this.Caff;
		}

		public String Cannabis;

		public String getCannabis() {
			return this.Cannabis;
		}

		public String Choc;

		public String getChoc() {
			return this.Choc;
		}

		public String Coke;

		public String getCoke() {
			return this.Coke;
		}

		public String Crack;

		public String getCrack() {
			return this.Crack;
		}

		public String Ecstasy;

		public String getEcstasy() {
			return this.Ecstasy;
		}

		public String Heroin;

		public String getHeroin() {
			return this.Heroin;
		}

		public String Ketamine;

		public String getKetamine() {
			return this.Ketamine;
		}

		public String Legalh;

		public String getLegalh() {
			return this.Legalh;
		}

		public String LSD;

		public String getLSD() {
			return this.LSD;
		}

		public String Meth;

		public String getMeth() {
			return this.Meth;
		}

		public String Mushrooms;

		public String getMushrooms() {
			return this.Mushrooms;
		}

		public String Nicotine;

		public String getNicotine() {
			return this.Nicotine;
		}

		public String Semer;

		public String getSemer() {
			return this.Semer;
		}

		public String VSA;

		public String getVSA() {
			return this.VSA;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Alcohol = readString(dis);

					this.Amphet = readString(dis);

					this.Amyl = readString(dis);

					this.Benzos = readString(dis);

					this.Caff = readString(dis);

					this.Cannabis = readString(dis);

					this.Choc = readString(dis);

					this.Coke = readString(dis);

					this.Crack = readString(dis);

					this.Ecstasy = readString(dis);

					this.Heroin = readString(dis);

					this.Ketamine = readString(dis);

					this.Legalh = readString(dis);

					this.LSD = readString(dis);

					this.Meth = readString(dis);

					this.Mushrooms = readString(dis);

					this.Nicotine = readString(dis);

					this.Semer = readString(dis);

					this.VSA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Alcohol, dos);

				// String

				writeString(this.Amphet, dos);

				// String

				writeString(this.Amyl, dos);

				// String

				writeString(this.Benzos, dos);

				// String

				writeString(this.Caff, dos);

				// String

				writeString(this.Cannabis, dos);

				// String

				writeString(this.Choc, dos);

				// String

				writeString(this.Coke, dos);

				// String

				writeString(this.Crack, dos);

				// String

				writeString(this.Ecstasy, dos);

				// String

				writeString(this.Heroin, dos);

				// String

				writeString(this.Ketamine, dos);

				// String

				writeString(this.Legalh, dos);

				// String

				writeString(this.LSD, dos);

				// String

				writeString(this.Meth, dos);

				// String

				writeString(this.Mushrooms, dos);

				// String

				writeString(this.Nicotine, dos);

				// String

				writeString(this.Semer, dos);

				// String

				writeString(this.VSA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Alcohol=" + Alcohol);
			sb.append(",Amphet=" + Amphet);
			sb.append(",Amyl=" + Amyl);
			sb.append(",Benzos=" + Benzos);
			sb.append(",Caff=" + Caff);
			sb.append(",Cannabis=" + Cannabis);
			sb.append(",Choc=" + Choc);
			sb.append(",Coke=" + Coke);
			sb.append(",Crack=" + Crack);
			sb.append(",Ecstasy=" + Ecstasy);
			sb.append(",Heroin=" + Heroin);
			sb.append(",Ketamine=" + Ketamine);
			sb.append(",Legalh=" + Legalh);
			sb.append(",LSD=" + LSD);
			sb.append(",Meth=" + Meth);
			sb.append(",Mushrooms=" + Mushrooms);
			sb.append(",Nicotine=" + Nicotine);
			sb.append(",Semer=" + Semer);
			sb.append(",VSA=" + VSA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public Integer Nscore;

		public Integer getNscore() {
			return this.Nscore;
		}

		public Integer Escore;

		public Integer getEscore() {
			return this.Escore;
		}

		public Integer Oscore;

		public Integer getOscore() {
			return this.Oscore;
		}

		public Integer Ascore;

		public Integer getAscore() {
			return this.Ascore;
		}

		public Integer Cscore;

		public Integer getCscore() {
			return this.Cscore;
		}

		public Integer Impulsivity;

		public Integer getImpulsivity() {
			return this.Impulsivity;
		}

		public Integer SS;

		public Integer getSS() {
			return this.SS;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.ID = this.ID;
			other.Nscore = this.Nscore;
			other.Escore = this.Escore;
			other.Oscore = this.Oscore;
			other.Ascore = this.Ascore;
			other.Cscore = this.Cscore;
			other.Impulsivity = this.Impulsivity;
			other.SS = this.SS;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Nscore = readInteger(dis);

					this.Escore = readInteger(dis);

					this.Oscore = readInteger(dis);

					this.Ascore = readInteger(dis);

					this.Cscore = readInteger(dis);

					this.Impulsivity = readInteger(dis);

					this.SS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// Integer

				writeInteger(this.Nscore, dos);

				// Integer

				writeInteger(this.Escore, dos);

				// Integer

				writeInteger(this.Oscore, dos);

				// Integer

				writeInteger(this.Ascore, dos);

				// Integer

				writeInteger(this.Cscore, dos);

				// Integer

				writeInteger(this.Impulsivity, dos);

				// Integer

				writeInteger(this.SS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Nscore=" + String.valueOf(Nscore));
			sb.append(",Escore=" + String.valueOf(Escore));
			sb.append(",Oscore=" + String.valueOf(Oscore));
			sb.append(",Ascore=" + String.valueOf(Ascore));
			sb.append(",Cscore=" + String.valueOf(Cscore));
			sb.append(",Impulsivity=" + String.valueOf(Impulsivity));
			sb.append(",SS=" + String.valueOf(SS));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Age;

		public String getAge() {
			return this.Age;
		}

		public Character Gender;

		public Character getGender() {
			return this.Gender;
		}

		public String Education;

		public String getEducation() {
			return this.Education;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Ethnicity;

		public String getEthnicity() {
			return this.Ethnicity;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.ID = this.ID;
			other.Age = this.Age;
			other.Gender = this.Gender;
			other.Education = this.Education;
			other.CountryCode = this.CountryCode;
			other.Ethnicity = this.Ethnicity;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Age = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Gender = null;
					} else {
						this.Gender = dis.readChar();
					}

					this.Education = readString(dis);

					this.CountryCode = readString(dis);

					this.Ethnicity = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Age, dos);

				// Character

				if (this.Gender == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Gender);
				}

				// String

				writeString(this.Education, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Ethnicity, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Age=" + Age);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",Education=" + Education);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Ethnicity=" + Ethnicity);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Age;

		public String getAge() {
			return this.Age;
		}

		public Character Gender;

		public Character getGender() {
			return this.Gender;
		}

		public String Education;

		public String getEducation() {
			return this.Education;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Ethnicity;

		public String getEthnicity() {
			return this.Ethnicity;
		}

		public Integer Nscore;

		public Integer getNscore() {
			return this.Nscore;
		}

		public Integer Escore;

		public Integer getEscore() {
			return this.Escore;
		}

		public Integer Oscore;

		public Integer getOscore() {
			return this.Oscore;
		}

		public Integer Ascore;

		public Integer getAscore() {
			return this.Ascore;
		}

		public Integer Cscore;

		public Integer getCscore() {
			return this.Cscore;
		}

		public Integer Impulsivity;

		public Integer getImpulsivity() {
			return this.Impulsivity;
		}

		public Integer SS;

		public Integer getSS() {
			return this.SS;
		}

		public String Alcohol;

		public String getAlcohol() {
			return this.Alcohol;
		}

		public String Amphet;

		public String getAmphet() {
			return this.Amphet;
		}

		public String Amyl;

		public String getAmyl() {
			return this.Amyl;
		}

		public String Benzos;

		public String getBenzos() {
			return this.Benzos;
		}

		public String Caff;

		public String getCaff() {
			return this.Caff;
		}

		public String Cannabis;

		public String getCannabis() {
			return this.Cannabis;
		}

		public String Choc;

		public String getChoc() {
			return this.Choc;
		}

		public String Coke;

		public String getCoke() {
			return this.Coke;
		}

		public String Crack;

		public String getCrack() {
			return this.Crack;
		}

		public String Ecstasy;

		public String getEcstasy() {
			return this.Ecstasy;
		}

		public String Heroin;

		public String getHeroin() {
			return this.Heroin;
		}

		public String Ketamine;

		public String getKetamine() {
			return this.Ketamine;
		}

		public String Legalh;

		public String getLegalh() {
			return this.Legalh;
		}

		public String LSD;

		public String getLSD() {
			return this.LSD;
		}

		public String Meth;

		public String getMeth() {
			return this.Meth;
		}

		public String Mushrooms;

		public String getMushrooms() {
			return this.Mushrooms;
		}

		public String Nicotine;

		public String getNicotine() {
			return this.Nicotine;
		}

		public String Semer;

		public String getSemer() {
			return this.Semer;
		}

		public String VSA;

		public String getVSA() {
			return this.VSA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.ID = this.ID;
			other.Age = this.Age;
			other.Gender = this.Gender;
			other.Education = this.Education;
			other.CountryCode = this.CountryCode;
			other.Ethnicity = this.Ethnicity;
			other.Nscore = this.Nscore;
			other.Escore = this.Escore;
			other.Oscore = this.Oscore;
			other.Ascore = this.Ascore;
			other.Cscore = this.Cscore;
			other.Impulsivity = this.Impulsivity;
			other.SS = this.SS;
			other.Alcohol = this.Alcohol;
			other.Amphet = this.Amphet;
			other.Amyl = this.Amyl;
			other.Benzos = this.Benzos;
			other.Caff = this.Caff;
			other.Cannabis = this.Cannabis;
			other.Choc = this.Choc;
			other.Coke = this.Coke;
			other.Crack = this.Crack;
			other.Ecstasy = this.Ecstasy;
			other.Heroin = this.Heroin;
			other.Ketamine = this.Ketamine;
			other.Legalh = this.Legalh;
			other.LSD = this.LSD;
			other.Meth = this.Meth;
			other.Mushrooms = this.Mushrooms;
			other.Nicotine = this.Nicotine;
			other.Semer = this.Semer;
			other.VSA = this.VSA;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Age = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Gender = null;
					} else {
						this.Gender = dis.readChar();
					}

					this.Education = readString(dis);

					this.CountryCode = readString(dis);

					this.Ethnicity = readString(dis);

					this.Nscore = readInteger(dis);

					this.Escore = readInteger(dis);

					this.Oscore = readInteger(dis);

					this.Ascore = readInteger(dis);

					this.Cscore = readInteger(dis);

					this.Impulsivity = readInteger(dis);

					this.SS = readInteger(dis);

					this.Alcohol = readString(dis);

					this.Amphet = readString(dis);

					this.Amyl = readString(dis);

					this.Benzos = readString(dis);

					this.Caff = readString(dis);

					this.Cannabis = readString(dis);

					this.Choc = readString(dis);

					this.Coke = readString(dis);

					this.Crack = readString(dis);

					this.Ecstasy = readString(dis);

					this.Heroin = readString(dis);

					this.Ketamine = readString(dis);

					this.Legalh = readString(dis);

					this.LSD = readString(dis);

					this.Meth = readString(dis);

					this.Mushrooms = readString(dis);

					this.Nicotine = readString(dis);

					this.Semer = readString(dis);

					this.VSA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Age, dos);

				// Character

				if (this.Gender == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Gender);
				}

				// String

				writeString(this.Education, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Ethnicity, dos);

				// Integer

				writeInteger(this.Nscore, dos);

				// Integer

				writeInteger(this.Escore, dos);

				// Integer

				writeInteger(this.Oscore, dos);

				// Integer

				writeInteger(this.Ascore, dos);

				// Integer

				writeInteger(this.Cscore, dos);

				// Integer

				writeInteger(this.Impulsivity, dos);

				// Integer

				writeInteger(this.SS, dos);

				// String

				writeString(this.Alcohol, dos);

				// String

				writeString(this.Amphet, dos);

				// String

				writeString(this.Amyl, dos);

				// String

				writeString(this.Benzos, dos);

				// String

				writeString(this.Caff, dos);

				// String

				writeString(this.Cannabis, dos);

				// String

				writeString(this.Choc, dos);

				// String

				writeString(this.Coke, dos);

				// String

				writeString(this.Crack, dos);

				// String

				writeString(this.Ecstasy, dos);

				// String

				writeString(this.Heroin, dos);

				// String

				writeString(this.Ketamine, dos);

				// String

				writeString(this.Legalh, dos);

				// String

				writeString(this.LSD, dos);

				// String

				writeString(this.Meth, dos);

				// String

				writeString(this.Mushrooms, dos);

				// String

				writeString(this.Nicotine, dos);

				// String

				writeString(this.Semer, dos);

				// String

				writeString(this.VSA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Age=" + Age);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",Education=" + Education);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Ethnicity=" + Ethnicity);
			sb.append(",Nscore=" + String.valueOf(Nscore));
			sb.append(",Escore=" + String.valueOf(Escore));
			sb.append(",Oscore=" + String.valueOf(Oscore));
			sb.append(",Ascore=" + String.valueOf(Ascore));
			sb.append(",Cscore=" + String.valueOf(Cscore));
			sb.append(",Impulsivity=" + String.valueOf(Impulsivity));
			sb.append(",SS=" + String.valueOf(SS));
			sb.append(",Alcohol=" + Alcohol);
			sb.append(",Amphet=" + Amphet);
			sb.append(",Amyl=" + Amyl);
			sb.append(",Benzos=" + Benzos);
			sb.append(",Caff=" + Caff);
			sb.append(",Cannabis=" + Cannabis);
			sb.append(",Choc=" + Choc);
			sb.append(",Coke=" + Coke);
			sb.append(",Crack=" + Crack);
			sb.append(",Ecstasy=" + Ecstasy);
			sb.append(",Heroin=" + Heroin);
			sb.append(",Ketamine=" + Ketamine);
			sb.append(",Legalh=" + Legalh);
			sb.append(",LSD=" + LSD);
			sb.append(",Meth=" + Meth);
			sb.append(",Mushrooms=" + Mushrooms);
			sb.append(",Nicotine=" + Nicotine);
			sb.append(",Semer=" + Semer);
			sb.append(",VSA=" + VSA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Age;

		public String getAge() {
			return this.Age;
		}

		public Character Gender;

		public Character getGender() {
			return this.Gender;
		}

		public String Education;

		public String getEducation() {
			return this.Education;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Ethnicity;

		public String getEthnicity() {
			return this.Ethnicity;
		}

		public Integer Nscore;

		public Integer getNscore() {
			return this.Nscore;
		}

		public Integer Escore;

		public Integer getEscore() {
			return this.Escore;
		}

		public Integer Oscore;

		public Integer getOscore() {
			return this.Oscore;
		}

		public Integer Ascore;

		public Integer getAscore() {
			return this.Ascore;
		}

		public Integer Cscore;

		public Integer getCscore() {
			return this.Cscore;
		}

		public Integer Impulsivity;

		public Integer getImpulsivity() {
			return this.Impulsivity;
		}

		public Integer SS;

		public Integer getSS() {
			return this.SS;
		}

		public String Alcohol;

		public String getAlcohol() {
			return this.Alcohol;
		}

		public String Amphet;

		public String getAmphet() {
			return this.Amphet;
		}

		public String Amyl;

		public String getAmyl() {
			return this.Amyl;
		}

		public String Benzos;

		public String getBenzos() {
			return this.Benzos;
		}

		public String Caff;

		public String getCaff() {
			return this.Caff;
		}

		public String Cannabis;

		public String getCannabis() {
			return this.Cannabis;
		}

		public String Choc;

		public String getChoc() {
			return this.Choc;
		}

		public String Coke;

		public String getCoke() {
			return this.Coke;
		}

		public String Crack;

		public String getCrack() {
			return this.Crack;
		}

		public String Ecstasy;

		public String getEcstasy() {
			return this.Ecstasy;
		}

		public String Heroin;

		public String getHeroin() {
			return this.Heroin;
		}

		public String Ketamine;

		public String getKetamine() {
			return this.Ketamine;
		}

		public String Legalh;

		public String getLegalh() {
			return this.Legalh;
		}

		public String LSD;

		public String getLSD() {
			return this.LSD;
		}

		public String Meth;

		public String getMeth() {
			return this.Meth;
		}

		public String Mushrooms;

		public String getMushrooms() {
			return this.Mushrooms;
		}

		public String Nicotine;

		public String getNicotine() {
			return this.Nicotine;
		}

		public String Semer;

		public String getSemer() {
			return this.Semer;
		}

		public String VSA;

		public String getVSA() {
			return this.VSA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.ID = this.ID;
			other.Age = this.Age;
			other.Gender = this.Gender;
			other.Education = this.Education;
			other.CountryCode = this.CountryCode;
			other.Ethnicity = this.Ethnicity;
			other.Nscore = this.Nscore;
			other.Escore = this.Escore;
			other.Oscore = this.Oscore;
			other.Ascore = this.Ascore;
			other.Cscore = this.Cscore;
			other.Impulsivity = this.Impulsivity;
			other.SS = this.SS;
			other.Alcohol = this.Alcohol;
			other.Amphet = this.Amphet;
			other.Amyl = this.Amyl;
			other.Benzos = this.Benzos;
			other.Caff = this.Caff;
			other.Cannabis = this.Cannabis;
			other.Choc = this.Choc;
			other.Coke = this.Coke;
			other.Crack = this.Crack;
			other.Ecstasy = this.Ecstasy;
			other.Heroin = this.Heroin;
			other.Ketamine = this.Ketamine;
			other.Legalh = this.Legalh;
			other.LSD = this.LSD;
			other.Meth = this.Meth;
			other.Mushrooms = this.Mushrooms;
			other.Nicotine = this.Nicotine;
			other.Semer = this.Semer;
			other.VSA = this.VSA;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Age = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Gender = null;
					} else {
						this.Gender = dis.readChar();
					}

					this.Education = readString(dis);

					this.CountryCode = readString(dis);

					this.Ethnicity = readString(dis);

					this.Nscore = readInteger(dis);

					this.Escore = readInteger(dis);

					this.Oscore = readInteger(dis);

					this.Ascore = readInteger(dis);

					this.Cscore = readInteger(dis);

					this.Impulsivity = readInteger(dis);

					this.SS = readInteger(dis);

					this.Alcohol = readString(dis);

					this.Amphet = readString(dis);

					this.Amyl = readString(dis);

					this.Benzos = readString(dis);

					this.Caff = readString(dis);

					this.Cannabis = readString(dis);

					this.Choc = readString(dis);

					this.Coke = readString(dis);

					this.Crack = readString(dis);

					this.Ecstasy = readString(dis);

					this.Heroin = readString(dis);

					this.Ketamine = readString(dis);

					this.Legalh = readString(dis);

					this.LSD = readString(dis);

					this.Meth = readString(dis);

					this.Mushrooms = readString(dis);

					this.Nicotine = readString(dis);

					this.Semer = readString(dis);

					this.VSA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Age, dos);

				// Character

				if (this.Gender == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Gender);
				}

				// String

				writeString(this.Education, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Ethnicity, dos);

				// Integer

				writeInteger(this.Nscore, dos);

				// Integer

				writeInteger(this.Escore, dos);

				// Integer

				writeInteger(this.Oscore, dos);

				// Integer

				writeInteger(this.Ascore, dos);

				// Integer

				writeInteger(this.Cscore, dos);

				// Integer

				writeInteger(this.Impulsivity, dos);

				// Integer

				writeInteger(this.SS, dos);

				// String

				writeString(this.Alcohol, dos);

				// String

				writeString(this.Amphet, dos);

				// String

				writeString(this.Amyl, dos);

				// String

				writeString(this.Benzos, dos);

				// String

				writeString(this.Caff, dos);

				// String

				writeString(this.Cannabis, dos);

				// String

				writeString(this.Choc, dos);

				// String

				writeString(this.Coke, dos);

				// String

				writeString(this.Crack, dos);

				// String

				writeString(this.Ecstasy, dos);

				// String

				writeString(this.Heroin, dos);

				// String

				writeString(this.Ketamine, dos);

				// String

				writeString(this.Legalh, dos);

				// String

				writeString(this.LSD, dos);

				// String

				writeString(this.Meth, dos);

				// String

				writeString(this.Mushrooms, dos);

				// String

				writeString(this.Nicotine, dos);

				// String

				writeString(this.Semer, dos);

				// String

				writeString(this.VSA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Age=" + Age);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",Education=" + Education);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Ethnicity=" + Ethnicity);
			sb.append(",Nscore=" + String.valueOf(Nscore));
			sb.append(",Escore=" + String.valueOf(Escore));
			sb.append(",Oscore=" + String.valueOf(Oscore));
			sb.append(",Ascore=" + String.valueOf(Ascore));
			sb.append(",Cscore=" + String.valueOf(Cscore));
			sb.append(",Impulsivity=" + String.valueOf(Impulsivity));
			sb.append(",SS=" + String.valueOf(SS));
			sb.append(",Alcohol=" + Alcohol);
			sb.append(",Amphet=" + Amphet);
			sb.append(",Amyl=" + Amyl);
			sb.append(",Benzos=" + Benzos);
			sb.append(",Caff=" + Caff);
			sb.append(",Cannabis=" + Cannabis);
			sb.append(",Choc=" + Choc);
			sb.append(",Coke=" + Coke);
			sb.append(",Crack=" + Crack);
			sb.append(",Ecstasy=" + Ecstasy);
			sb.append(",Heroin=" + Heroin);
			sb.append(",Ketamine=" + Ketamine);
			sb.append(",Legalh=" + Legalh);
			sb.append(",LSD=" + LSD);
			sb.append(",Meth=" + Meth);
			sb.append(",Mushrooms=" + Mushrooms);
			sb.append(",Nicotine=" + Nicotine);
			sb.append(",Semer=" + Semer);
			sb.append(",VSA=" + VSA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Age;

		public String getAge() {
			return this.Age;
		}

		public Character Gender;

		public Character getGender() {
			return this.Gender;
		}

		public String Education;

		public String getEducation() {
			return this.Education;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Ethnicity;

		public String getEthnicity() {
			return this.Ethnicity;
		}

		public Integer Nscore;

		public Integer getNscore() {
			return this.Nscore;
		}

		public Integer Escore;

		public Integer getEscore() {
			return this.Escore;
		}

		public Integer Oscore;

		public Integer getOscore() {
			return this.Oscore;
		}

		public Integer Ascore;

		public Integer getAscore() {
			return this.Ascore;
		}

		public Integer Cscore;

		public Integer getCscore() {
			return this.Cscore;
		}

		public Integer Impulsivity;

		public Integer getImpulsivity() {
			return this.Impulsivity;
		}

		public Integer SS;

		public Integer getSS() {
			return this.SS;
		}

		public String Alcohol;

		public String getAlcohol() {
			return this.Alcohol;
		}

		public String Amphet;

		public String getAmphet() {
			return this.Amphet;
		}

		public String Amyl;

		public String getAmyl() {
			return this.Amyl;
		}

		public String Benzos;

		public String getBenzos() {
			return this.Benzos;
		}

		public String Caff;

		public String getCaff() {
			return this.Caff;
		}

		public String Cannabis;

		public String getCannabis() {
			return this.Cannabis;
		}

		public String Choc;

		public String getChoc() {
			return this.Choc;
		}

		public String Coke;

		public String getCoke() {
			return this.Coke;
		}

		public String Crack;

		public String getCrack() {
			return this.Crack;
		}

		public String Ecstasy;

		public String getEcstasy() {
			return this.Ecstasy;
		}

		public String Heroin;

		public String getHeroin() {
			return this.Heroin;
		}

		public String Ketamine;

		public String getKetamine() {
			return this.Ketamine;
		}

		public String Legalh;

		public String getLegalh() {
			return this.Legalh;
		}

		public String LSD;

		public String getLSD() {
			return this.LSD;
		}

		public String Meth;

		public String getMeth() {
			return this.Meth;
		}

		public String Mushrooms;

		public String getMushrooms() {
			return this.Mushrooms;
		}

		public String Nicotine;

		public String getNicotine() {
			return this.Nicotine;
		}

		public String Semer;

		public String getSemer() {
			return this.Semer;
		}

		public String VSA;

		public String getVSA() {
			return this.VSA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.ID = this.ID;
			other.Age = this.Age;
			other.Gender = this.Gender;
			other.Education = this.Education;
			other.CountryCode = this.CountryCode;
			other.Ethnicity = this.Ethnicity;
			other.Nscore = this.Nscore;
			other.Escore = this.Escore;
			other.Oscore = this.Oscore;
			other.Ascore = this.Ascore;
			other.Cscore = this.Cscore;
			other.Impulsivity = this.Impulsivity;
			other.SS = this.SS;
			other.Alcohol = this.Alcohol;
			other.Amphet = this.Amphet;
			other.Amyl = this.Amyl;
			other.Benzos = this.Benzos;
			other.Caff = this.Caff;
			other.Cannabis = this.Cannabis;
			other.Choc = this.Choc;
			other.Coke = this.Coke;
			other.Crack = this.Crack;
			other.Ecstasy = this.Ecstasy;
			other.Heroin = this.Heroin;
			other.Ketamine = this.Ketamine;
			other.Legalh = this.Legalh;
			other.LSD = this.LSD;
			other.Meth = this.Meth;
			other.Mushrooms = this.Mushrooms;
			other.Nicotine = this.Nicotine;
			other.Semer = this.Semer;
			other.VSA = this.VSA;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Age = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Gender = null;
					} else {
						this.Gender = dis.readChar();
					}

					this.Education = readString(dis);

					this.CountryCode = readString(dis);

					this.Ethnicity = readString(dis);

					this.Nscore = readInteger(dis);

					this.Escore = readInteger(dis);

					this.Oscore = readInteger(dis);

					this.Ascore = readInteger(dis);

					this.Cscore = readInteger(dis);

					this.Impulsivity = readInteger(dis);

					this.SS = readInteger(dis);

					this.Alcohol = readString(dis);

					this.Amphet = readString(dis);

					this.Amyl = readString(dis);

					this.Benzos = readString(dis);

					this.Caff = readString(dis);

					this.Cannabis = readString(dis);

					this.Choc = readString(dis);

					this.Coke = readString(dis);

					this.Crack = readString(dis);

					this.Ecstasy = readString(dis);

					this.Heroin = readString(dis);

					this.Ketamine = readString(dis);

					this.Legalh = readString(dis);

					this.LSD = readString(dis);

					this.Meth = readString(dis);

					this.Mushrooms = readString(dis);

					this.Nicotine = readString(dis);

					this.Semer = readString(dis);

					this.VSA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Age, dos);

				// Character

				if (this.Gender == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Gender);
				}

				// String

				writeString(this.Education, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Ethnicity, dos);

				// Integer

				writeInteger(this.Nscore, dos);

				// Integer

				writeInteger(this.Escore, dos);

				// Integer

				writeInteger(this.Oscore, dos);

				// Integer

				writeInteger(this.Ascore, dos);

				// Integer

				writeInteger(this.Cscore, dos);

				// Integer

				writeInteger(this.Impulsivity, dos);

				// Integer

				writeInteger(this.SS, dos);

				// String

				writeString(this.Alcohol, dos);

				// String

				writeString(this.Amphet, dos);

				// String

				writeString(this.Amyl, dos);

				// String

				writeString(this.Benzos, dos);

				// String

				writeString(this.Caff, dos);

				// String

				writeString(this.Cannabis, dos);

				// String

				writeString(this.Choc, dos);

				// String

				writeString(this.Coke, dos);

				// String

				writeString(this.Crack, dos);

				// String

				writeString(this.Ecstasy, dos);

				// String

				writeString(this.Heroin, dos);

				// String

				writeString(this.Ketamine, dos);

				// String

				writeString(this.Legalh, dos);

				// String

				writeString(this.LSD, dos);

				// String

				writeString(this.Meth, dos);

				// String

				writeString(this.Mushrooms, dos);

				// String

				writeString(this.Nicotine, dos);

				// String

				writeString(this.Semer, dos);

				// String

				writeString(this.VSA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Age=" + Age);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",Education=" + Education);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Ethnicity=" + Ethnicity);
			sb.append(",Nscore=" + String.valueOf(Nscore));
			sb.append(",Escore=" + String.valueOf(Escore));
			sb.append(",Oscore=" + String.valueOf(Oscore));
			sb.append(",Ascore=" + String.valueOf(Ascore));
			sb.append(",Cscore=" + String.valueOf(Cscore));
			sb.append(",Impulsivity=" + String.valueOf(Impulsivity));
			sb.append(",SS=" + String.valueOf(SS));
			sb.append(",Alcohol=" + Alcohol);
			sb.append(",Amphet=" + Amphet);
			sb.append(",Amyl=" + Amyl);
			sb.append(",Benzos=" + Benzos);
			sb.append(",Caff=" + Caff);
			sb.append(",Cannabis=" + Cannabis);
			sb.append(",Choc=" + Choc);
			sb.append(",Coke=" + Coke);
			sb.append(",Crack=" + Crack);
			sb.append(",Ecstasy=" + Ecstasy);
			sb.append(",Heroin=" + Heroin);
			sb.append(",Ketamine=" + Ketamine);
			sb.append(",Legalh=" + Legalh);
			sb.append(",LSD=" + LSD);
			sb.append(",Meth=" + Meth);
			sb.append(",Mushrooms=" + Mushrooms);
			sb.append(",Nicotine=" + Nicotine);
			sb.append(",Semer=" + Semer);
			sb.append(",VSA=" + VSA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outStruct implements
			routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Age;

		public String getAge() {
			return this.Age;
		}

		public Character Gender;

		public Character getGender() {
			return this.Gender;
		}

		public String Education;

		public String getEducation() {
			return this.Education;
		}

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Ethnicity;

		public String getEthnicity() {
			return this.Ethnicity;
		}

		public Integer Nscore;

		public Integer getNscore() {
			return this.Nscore;
		}

		public Integer Escore;

		public Integer getEscore() {
			return this.Escore;
		}

		public Integer Oscore;

		public Integer getOscore() {
			return this.Oscore;
		}

		public Integer Ascore;

		public Integer getAscore() {
			return this.Ascore;
		}

		public Integer Cscore;

		public Integer getCscore() {
			return this.Cscore;
		}

		public Integer Impulsivity;

		public Integer getImpulsivity() {
			return this.Impulsivity;
		}

		public Integer SS;

		public Integer getSS() {
			return this.SS;
		}

		public String Alcohol;

		public String getAlcohol() {
			return this.Alcohol;
		}

		public String Amphet;

		public String getAmphet() {
			return this.Amphet;
		}

		public String Amyl;

		public String getAmyl() {
			return this.Amyl;
		}

		public String Benzos;

		public String getBenzos() {
			return this.Benzos;
		}

		public String Caff;

		public String getCaff() {
			return this.Caff;
		}

		public String Cannabis;

		public String getCannabis() {
			return this.Cannabis;
		}

		public String Choc;

		public String getChoc() {
			return this.Choc;
		}

		public String Coke;

		public String getCoke() {
			return this.Coke;
		}

		public String Crack;

		public String getCrack() {
			return this.Crack;
		}

		public String Ecstasy;

		public String getEcstasy() {
			return this.Ecstasy;
		}

		public String Heroin;

		public String getHeroin() {
			return this.Heroin;
		}

		public String Ketamine;

		public String getKetamine() {
			return this.Ketamine;
		}

		public String Legalh;

		public String getLegalh() {
			return this.Legalh;
		}

		public String LSD;

		public String getLSD() {
			return this.LSD;
		}

		public String Meth;

		public String getMeth() {
			return this.Meth;
		}

		public String Mushrooms;

		public String getMushrooms() {
			return this.Mushrooms;
		}

		public String Nicotine;

		public String getNicotine() {
			return this.Nicotine;
		}

		public String Semer;

		public String getSemer() {
			return this.Semer;
		}

		public String VSA;

		public String getVSA() {
			return this.VSA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final outStruct other = (outStruct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(outStruct other) {

			other.ID = this.ID;
			other.Age = this.Age;
			other.Gender = this.Gender;
			other.Education = this.Education;
			other.CountryCode = this.CountryCode;
			other.Ethnicity = this.Ethnicity;
			other.Nscore = this.Nscore;
			other.Escore = this.Escore;
			other.Oscore = this.Oscore;
			other.Ascore = this.Ascore;
			other.Cscore = this.Cscore;
			other.Impulsivity = this.Impulsivity;
			other.SS = this.SS;
			other.Alcohol = this.Alcohol;
			other.Amphet = this.Amphet;
			other.Amyl = this.Amyl;
			other.Benzos = this.Benzos;
			other.Caff = this.Caff;
			other.Cannabis = this.Cannabis;
			other.Choc = this.Choc;
			other.Coke = this.Coke;
			other.Crack = this.Crack;
			other.Ecstasy = this.Ecstasy;
			other.Heroin = this.Heroin;
			other.Ketamine = this.Ketamine;
			other.Legalh = this.Legalh;
			other.LSD = this.LSD;
			other.Meth = this.Meth;
			other.Mushrooms = this.Mushrooms;
			other.Nicotine = this.Nicotine;
			other.Semer = this.Semer;
			other.VSA = this.VSA;

		}

		public void copyKeysDataTo(outStruct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Age = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Gender = null;
					} else {
						this.Gender = dis.readChar();
					}

					this.Education = readString(dis);

					this.CountryCode = readString(dis);

					this.Ethnicity = readString(dis);

					this.Nscore = readInteger(dis);

					this.Escore = readInteger(dis);

					this.Oscore = readInteger(dis);

					this.Ascore = readInteger(dis);

					this.Cscore = readInteger(dis);

					this.Impulsivity = readInteger(dis);

					this.SS = readInteger(dis);

					this.Alcohol = readString(dis);

					this.Amphet = readString(dis);

					this.Amyl = readString(dis);

					this.Benzos = readString(dis);

					this.Caff = readString(dis);

					this.Cannabis = readString(dis);

					this.Choc = readString(dis);

					this.Coke = readString(dis);

					this.Crack = readString(dis);

					this.Ecstasy = readString(dis);

					this.Heroin = readString(dis);

					this.Ketamine = readString(dis);

					this.Legalh = readString(dis);

					this.LSD = readString(dis);

					this.Meth = readString(dis);

					this.Mushrooms = readString(dis);

					this.Nicotine = readString(dis);

					this.Semer = readString(dis);

					this.VSA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Age, dos);

				// Character

				if (this.Gender == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Gender);
				}

				// String

				writeString(this.Education, dos);

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Ethnicity, dos);

				// Integer

				writeInteger(this.Nscore, dos);

				// Integer

				writeInteger(this.Escore, dos);

				// Integer

				writeInteger(this.Oscore, dos);

				// Integer

				writeInteger(this.Ascore, dos);

				// Integer

				writeInteger(this.Cscore, dos);

				// Integer

				writeInteger(this.Impulsivity, dos);

				// Integer

				writeInteger(this.SS, dos);

				// String

				writeString(this.Alcohol, dos);

				// String

				writeString(this.Amphet, dos);

				// String

				writeString(this.Amyl, dos);

				// String

				writeString(this.Benzos, dos);

				// String

				writeString(this.Caff, dos);

				// String

				writeString(this.Cannabis, dos);

				// String

				writeString(this.Choc, dos);

				// String

				writeString(this.Coke, dos);

				// String

				writeString(this.Crack, dos);

				// String

				writeString(this.Ecstasy, dos);

				// String

				writeString(this.Heroin, dos);

				// String

				writeString(this.Ketamine, dos);

				// String

				writeString(this.Legalh, dos);

				// String

				writeString(this.LSD, dos);

				// String

				writeString(this.Meth, dos);

				// String

				writeString(this.Mushrooms, dos);

				// String

				writeString(this.Nicotine, dos);

				// String

				writeString(this.Semer, dos);

				// String

				writeString(this.VSA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Age=" + Age);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",Education=" + Education);
			sb.append(",CountryCode=" + CountryCode);
			sb.append(",Ethnicity=" + Ethnicity);
			sb.append(",Nscore=" + String.valueOf(Nscore));
			sb.append(",Escore=" + String.valueOf(Escore));
			sb.append(",Oscore=" + String.valueOf(Oscore));
			sb.append(",Ascore=" + String.valueOf(Ascore));
			sb.append(",Cscore=" + String.valueOf(Cscore));
			sb.append(",Impulsivity=" + String.valueOf(Impulsivity));
			sb.append(",SS=" + String.valueOf(SS));
			sb.append(",Alcohol=" + Alcohol);
			sb.append(",Amphet=" + Amphet);
			sb.append(",Amyl=" + Amyl);
			sb.append(",Benzos=" + Benzos);
			sb.append(",Caff=" + Caff);
			sb.append(",Cannabis=" + Cannabis);
			sb.append(",Choc=" + Choc);
			sb.append(",Coke=" + Coke);
			sb.append(",Crack=" + Crack);
			sb.append(",Ecstasy=" + Ecstasy);
			sb.append(",Heroin=" + Heroin);
			sb.append(",Ketamine=" + Ketamine);
			sb.append(",Legalh=" + Legalh);
			sb.append(",LSD=" + LSD);
			sb.append(",Meth=" + Meth);
			sb.append(",Mushrooms=" + Mushrooms);
			sb.append(",Nicotine=" + Nicotine);
			sb.append(",Semer=" + Semer);
			sb.append(",VSA=" + VSA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Age;

		public String getAge() {
			return this.Age;
		}

		public Character Gender;

		public Character getGender() {
			return this.Gender;
		}

		public String Education;

		public String getEducation() {
			return this.Education;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Ethnicity;

		public String getEthnicity() {
			return this.Ethnicity;
		}

		public Integer Nscore;

		public Integer getNscore() {
			return this.Nscore;
		}

		public Integer Escore;

		public Integer getEscore() {
			return this.Escore;
		}

		public Integer Oscore;

		public Integer getOscore() {
			return this.Oscore;
		}

		public Integer Ascore;

		public Integer getAscore() {
			return this.Ascore;
		}

		public Integer Cscore;

		public Integer getCscore() {
			return this.Cscore;
		}

		public Integer Impulsivity;

		public Integer getImpulsivity() {
			return this.Impulsivity;
		}

		public Integer SS;

		public Integer getSS() {
			return this.SS;
		}

		public String Alcohol;

		public String getAlcohol() {
			return this.Alcohol;
		}

		public String Amphet;

		public String getAmphet() {
			return this.Amphet;
		}

		public String Amyl;

		public String getAmyl() {
			return this.Amyl;
		}

		public String Benzos;

		public String getBenzos() {
			return this.Benzos;
		}

		public String Caff;

		public String getCaff() {
			return this.Caff;
		}

		public String Cannabis;

		public String getCannabis() {
			return this.Cannabis;
		}

		public String Choc;

		public String getChoc() {
			return this.Choc;
		}

		public String Coke;

		public String getCoke() {
			return this.Coke;
		}

		public String Crack;

		public String getCrack() {
			return this.Crack;
		}

		public String Ecstasy;

		public String getEcstasy() {
			return this.Ecstasy;
		}

		public String Heroin;

		public String getHeroin() {
			return this.Heroin;
		}

		public String Ketamine;

		public String getKetamine() {
			return this.Ketamine;
		}

		public String Legalh;

		public String getLegalh() {
			return this.Legalh;
		}

		public String LSD;

		public String getLSD() {
			return this.LSD;
		}

		public String Meth;

		public String getMeth() {
			return this.Meth;
		}

		public String Mushrooms;

		public String getMushrooms() {
			return this.Mushrooms;
		}

		public String Nicotine;

		public String getNicotine() {
			return this.Nicotine;
		}

		public String Semer;

		public String getSemer() {
			return this.Semer;
		}

		public String VSA;

		public String getVSA() {
			return this.VSA;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Age = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Gender = null;
					} else {
						this.Gender = dis.readChar();
					}

					this.Education = readString(dis);

					this.Country = readString(dis);

					this.Ethnicity = readString(dis);

					this.Nscore = readInteger(dis);

					this.Escore = readInteger(dis);

					this.Oscore = readInteger(dis);

					this.Ascore = readInteger(dis);

					this.Cscore = readInteger(dis);

					this.Impulsivity = readInteger(dis);

					this.SS = readInteger(dis);

					this.Alcohol = readString(dis);

					this.Amphet = readString(dis);

					this.Amyl = readString(dis);

					this.Benzos = readString(dis);

					this.Caff = readString(dis);

					this.Cannabis = readString(dis);

					this.Choc = readString(dis);

					this.Coke = readString(dis);

					this.Crack = readString(dis);

					this.Ecstasy = readString(dis);

					this.Heroin = readString(dis);

					this.Ketamine = readString(dis);

					this.Legalh = readString(dis);

					this.LSD = readString(dis);

					this.Meth = readString(dis);

					this.Mushrooms = readString(dis);

					this.Nicotine = readString(dis);

					this.Semer = readString(dis);

					this.VSA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Age, dos);

				// Character

				if (this.Gender == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Gender);
				}

				// String

				writeString(this.Education, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Ethnicity, dos);

				// Integer

				writeInteger(this.Nscore, dos);

				// Integer

				writeInteger(this.Escore, dos);

				// Integer

				writeInteger(this.Oscore, dos);

				// Integer

				writeInteger(this.Ascore, dos);

				// Integer

				writeInteger(this.Cscore, dos);

				// Integer

				writeInteger(this.Impulsivity, dos);

				// Integer

				writeInteger(this.SS, dos);

				// String

				writeString(this.Alcohol, dos);

				// String

				writeString(this.Amphet, dos);

				// String

				writeString(this.Amyl, dos);

				// String

				writeString(this.Benzos, dos);

				// String

				writeString(this.Caff, dos);

				// String

				writeString(this.Cannabis, dos);

				// String

				writeString(this.Choc, dos);

				// String

				writeString(this.Coke, dos);

				// String

				writeString(this.Crack, dos);

				// String

				writeString(this.Ecstasy, dos);

				// String

				writeString(this.Heroin, dos);

				// String

				writeString(this.Ketamine, dos);

				// String

				writeString(this.Legalh, dos);

				// String

				writeString(this.LSD, dos);

				// String

				writeString(this.Meth, dos);

				// String

				writeString(this.Mushrooms, dos);

				// String

				writeString(this.Nicotine, dos);

				// String

				writeString(this.Semer, dos);

				// String

				writeString(this.VSA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Age=" + Age);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",Education=" + Education);
			sb.append(",Country=" + Country);
			sb.append(",Ethnicity=" + Ethnicity);
			sb.append(",Nscore=" + String.valueOf(Nscore));
			sb.append(",Escore=" + String.valueOf(Escore));
			sb.append(",Oscore=" + String.valueOf(Oscore));
			sb.append(",Ascore=" + String.valueOf(Ascore));
			sb.append(",Cscore=" + String.valueOf(Cscore));
			sb.append(",Impulsivity=" + String.valueOf(Impulsivity));
			sb.append(",SS=" + String.valueOf(SS));
			sb.append(",Alcohol=" + Alcohol);
			sb.append(",Amphet=" + Amphet);
			sb.append(",Amyl=" + Amyl);
			sb.append(",Benzos=" + Benzos);
			sb.append(",Caff=" + Caff);
			sb.append(",Cannabis=" + Cannabis);
			sb.append(",Choc=" + Choc);
			sb.append(",Coke=" + Coke);
			sb.append(",Crack=" + Crack);
			sb.append(",Ecstasy=" + Ecstasy);
			sb.append(",Heroin=" + Heroin);
			sb.append(",Ketamine=" + Ketamine);
			sb.append(",Legalh=" + Legalh);
			sb.append(",LSD=" + LSD);
			sb.append(",Meth=" + Meth);
			sb.append(",Mushrooms=" + Mushrooms);
			sb.append(",Nicotine=" + Nicotine);
			sb.append(",Semer=" + Semer);
			sb.append(",VSA=" + VSA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID;

		public String getID() {
			return this.ID;
		}

		public String Age;

		public String getAge() {
			return this.Age;
		}

		public Character Gender;

		public Character getGender() {
			return this.Gender;
		}

		public String Education;

		public String getEducation() {
			return this.Education;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Ethnicity;

		public String getEthnicity() {
			return this.Ethnicity;
		}

		public String Nscore;

		public String getNscore() {
			return this.Nscore;
		}

		public String Escore;

		public String getEscore() {
			return this.Escore;
		}

		public String Oscore;

		public String getOscore() {
			return this.Oscore;
		}

		public String Ascore;

		public String getAscore() {
			return this.Ascore;
		}

		public String Cscore;

		public String getCscore() {
			return this.Cscore;
		}

		public String Impulsivity;

		public String getImpulsivity() {
			return this.Impulsivity;
		}

		public String SS;

		public String getSS() {
			return this.SS;
		}

		public String Alcohol;

		public String getAlcohol() {
			return this.Alcohol;
		}

		public String Amphet;

		public String getAmphet() {
			return this.Amphet;
		}

		public String Amyl;

		public String getAmyl() {
			return this.Amyl;
		}

		public String Benzos;

		public String getBenzos() {
			return this.Benzos;
		}

		public String Caff;

		public String getCaff() {
			return this.Caff;
		}

		public String Cannabis;

		public String getCannabis() {
			return this.Cannabis;
		}

		public String Choc;

		public String getChoc() {
			return this.Choc;
		}

		public String Coke;

		public String getCoke() {
			return this.Coke;
		}

		public String Crack;

		public String getCrack() {
			return this.Crack;
		}

		public String Ecstasy;

		public String getEcstasy() {
			return this.Ecstasy;
		}

		public String Heroin;

		public String getHeroin() {
			return this.Heroin;
		}

		public String Ketamine;

		public String getKetamine() {
			return this.Ketamine;
		}

		public String Legalh;

		public String getLegalh() {
			return this.Legalh;
		}

		public String LSD;

		public String getLSD() {
			return this.LSD;
		}

		public String Meth;

		public String getMeth() {
			return this.Meth;
		}

		public String Mushrooms;

		public String getMushrooms() {
			return this.Mushrooms;
		}

		public String Nicotine;

		public String getNicotine() {
			return this.Nicotine;
		}

		public String Semer;

		public String getSemer() {
			return this.Semer;
		}

		public String VSA;

		public String getVSA() {
			return this.VSA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ID = this.ID;
			other.Age = this.Age;
			other.Gender = this.Gender;
			other.Education = this.Education;
			other.Country = this.Country;
			other.Ethnicity = this.Ethnicity;
			other.Nscore = this.Nscore;
			other.Escore = this.Escore;
			other.Oscore = this.Oscore;
			other.Ascore = this.Ascore;
			other.Cscore = this.Cscore;
			other.Impulsivity = this.Impulsivity;
			other.SS = this.SS;
			other.Alcohol = this.Alcohol;
			other.Amphet = this.Amphet;
			other.Amyl = this.Amyl;
			other.Benzos = this.Benzos;
			other.Caff = this.Caff;
			other.Cannabis = this.Cannabis;
			other.Choc = this.Choc;
			other.Coke = this.Coke;
			other.Crack = this.Crack;
			other.Ecstasy = this.Ecstasy;
			other.Heroin = this.Heroin;
			other.Ketamine = this.Ketamine;
			other.Legalh = this.Legalh;
			other.LSD = this.LSD;
			other.Meth = this.Meth;
			other.Mushrooms = this.Mushrooms;
			other.Nicotine = this.Nicotine;
			other.Semer = this.Semer;
			other.VSA = this.VSA;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readString(dis);

					this.Age = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Gender = null;
					} else {
						this.Gender = dis.readChar();
					}

					this.Education = readString(dis);

					this.Country = readString(dis);

					this.Ethnicity = readString(dis);

					this.Nscore = readString(dis);

					this.Escore = readString(dis);

					this.Oscore = readString(dis);

					this.Ascore = readString(dis);

					this.Cscore = readString(dis);

					this.Impulsivity = readString(dis);

					this.SS = readString(dis);

					this.Alcohol = readString(dis);

					this.Amphet = readString(dis);

					this.Amyl = readString(dis);

					this.Benzos = readString(dis);

					this.Caff = readString(dis);

					this.Cannabis = readString(dis);

					this.Choc = readString(dis);

					this.Coke = readString(dis);

					this.Crack = readString(dis);

					this.Ecstasy = readString(dis);

					this.Heroin = readString(dis);

					this.Ketamine = readString(dis);

					this.Legalh = readString(dis);

					this.LSD = readString(dis);

					this.Meth = readString(dis);

					this.Mushrooms = readString(dis);

					this.Nicotine = readString(dis);

					this.Semer = readString(dis);

					this.VSA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID, dos);

				// String

				writeString(this.Age, dos);

				// Character

				if (this.Gender == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Gender);
				}

				// String

				writeString(this.Education, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Ethnicity, dos);

				// String

				writeString(this.Nscore, dos);

				// String

				writeString(this.Escore, dos);

				// String

				writeString(this.Oscore, dos);

				// String

				writeString(this.Ascore, dos);

				// String

				writeString(this.Cscore, dos);

				// String

				writeString(this.Impulsivity, dos);

				// String

				writeString(this.SS, dos);

				// String

				writeString(this.Alcohol, dos);

				// String

				writeString(this.Amphet, dos);

				// String

				writeString(this.Amyl, dos);

				// String

				writeString(this.Benzos, dos);

				// String

				writeString(this.Caff, dos);

				// String

				writeString(this.Cannabis, dos);

				// String

				writeString(this.Choc, dos);

				// String

				writeString(this.Coke, dos);

				// String

				writeString(this.Crack, dos);

				// String

				writeString(this.Ecstasy, dos);

				// String

				writeString(this.Heroin, dos);

				// String

				writeString(this.Ketamine, dos);

				// String

				writeString(this.Legalh, dos);

				// String

				writeString(this.LSD, dos);

				// String

				writeString(this.Meth, dos);

				// String

				writeString(this.Mushrooms, dos);

				// String

				writeString(this.Nicotine, dos);

				// String

				writeString(this.Semer, dos);

				// String

				writeString(this.VSA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + ID);
			sb.append(",Age=" + Age);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",Education=" + Education);
			sb.append(",Country=" + Country);
			sb.append(",Ethnicity=" + Ethnicity);
			sb.append(",Nscore=" + Nscore);
			sb.append(",Escore=" + Escore);
			sb.append(",Oscore=" + Oscore);
			sb.append(",Ascore=" + Ascore);
			sb.append(",Cscore=" + Cscore);
			sb.append(",Impulsivity=" + Impulsivity);
			sb.append(",SS=" + SS);
			sb.append(",Alcohol=" + Alcohol);
			sb.append(",Amphet=" + Amphet);
			sb.append(",Amyl=" + Amyl);
			sb.append(",Benzos=" + Benzos);
			sb.append(",Caff=" + Caff);
			sb.append(",Cannabis=" + Cannabis);
			sb.append(",Choc=" + Choc);
			sb.append(",Coke=" + Coke);
			sb.append(",Crack=" + Crack);
			sb.append(",Ecstasy=" + Ecstasy);
			sb.append(",Heroin=" + Heroin);
			sb.append(",Ketamine=" + Ketamine);
			sb.append(",Legalh=" + Legalh);
			sb.append(",LSD=" + LSD);
			sb.append(",Meth=" + Meth);
			sb.append(",Mushrooms=" + Mushrooms);
			sb.append(",Nicotine=" + Nicotine);
			sb.append(",Semer=" + Semer);
			sb.append(",VSA=" + VSA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID;

		public String getID() {
			return this.ID;
		}

		public String Age;

		public String getAge() {
			return this.Age;
		}

		public Character Gender;

		public Character getGender() {
			return this.Gender;
		}

		public String Education;

		public String getEducation() {
			return this.Education;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Ethnicity;

		public String getEthnicity() {
			return this.Ethnicity;
		}

		public String Nscore;

		public String getNscore() {
			return this.Nscore;
		}

		public String Escore;

		public String getEscore() {
			return this.Escore;
		}

		public String Oscore;

		public String getOscore() {
			return this.Oscore;
		}

		public String Ascore;

		public String getAscore() {
			return this.Ascore;
		}

		public String Cscore;

		public String getCscore() {
			return this.Cscore;
		}

		public String Impulsivity;

		public String getImpulsivity() {
			return this.Impulsivity;
		}

		public String SS;

		public String getSS() {
			return this.SS;
		}

		public String Alcohol;

		public String getAlcohol() {
			return this.Alcohol;
		}

		public String Amphet;

		public String getAmphet() {
			return this.Amphet;
		}

		public String Amyl;

		public String getAmyl() {
			return this.Amyl;
		}

		public String Benzos;

		public String getBenzos() {
			return this.Benzos;
		}

		public String Caff;

		public String getCaff() {
			return this.Caff;
		}

		public String Cannabis;

		public String getCannabis() {
			return this.Cannabis;
		}

		public String Choc;

		public String getChoc() {
			return this.Choc;
		}

		public String Coke;

		public String getCoke() {
			return this.Coke;
		}

		public String Crack;

		public String getCrack() {
			return this.Crack;
		}

		public String Ecstasy;

		public String getEcstasy() {
			return this.Ecstasy;
		}

		public String Heroin;

		public String getHeroin() {
			return this.Heroin;
		}

		public String Ketamine;

		public String getKetamine() {
			return this.Ketamine;
		}

		public String Legalh;

		public String getLegalh() {
			return this.Legalh;
		}

		public String LSD;

		public String getLSD() {
			return this.LSD;
		}

		public String Meth;

		public String getMeth() {
			return this.Meth;
		}

		public String Mushrooms;

		public String getMushrooms() {
			return this.Mushrooms;
		}

		public String Nicotine;

		public String getNicotine() {
			return this.Nicotine;
		}

		public String Semer;

		public String getSemer() {
			return this.Semer;
		}

		public String VSA;

		public String getVSA() {
			return this.VSA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.ID = this.ID;
			other.Age = this.Age;
			other.Gender = this.Gender;
			other.Education = this.Education;
			other.Country = this.Country;
			other.Ethnicity = this.Ethnicity;
			other.Nscore = this.Nscore;
			other.Escore = this.Escore;
			other.Oscore = this.Oscore;
			other.Ascore = this.Ascore;
			other.Cscore = this.Cscore;
			other.Impulsivity = this.Impulsivity;
			other.SS = this.SS;
			other.Alcohol = this.Alcohol;
			other.Amphet = this.Amphet;
			other.Amyl = this.Amyl;
			other.Benzos = this.Benzos;
			other.Caff = this.Caff;
			other.Cannabis = this.Cannabis;
			other.Choc = this.Choc;
			other.Coke = this.Coke;
			other.Crack = this.Crack;
			other.Ecstasy = this.Ecstasy;
			other.Heroin = this.Heroin;
			other.Ketamine = this.Ketamine;
			other.Legalh = this.Legalh;
			other.LSD = this.LSD;
			other.Meth = this.Meth;
			other.Mushrooms = this.Mushrooms;
			other.Nicotine = this.Nicotine;
			other.Semer = this.Semer;
			other.VSA = this.VSA;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readString(dis);

					this.Age = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Gender = null;
					} else {
						this.Gender = dis.readChar();
					}

					this.Education = readString(dis);

					this.Country = readString(dis);

					this.Ethnicity = readString(dis);

					this.Nscore = readString(dis);

					this.Escore = readString(dis);

					this.Oscore = readString(dis);

					this.Ascore = readString(dis);

					this.Cscore = readString(dis);

					this.Impulsivity = readString(dis);

					this.SS = readString(dis);

					this.Alcohol = readString(dis);

					this.Amphet = readString(dis);

					this.Amyl = readString(dis);

					this.Benzos = readString(dis);

					this.Caff = readString(dis);

					this.Cannabis = readString(dis);

					this.Choc = readString(dis);

					this.Coke = readString(dis);

					this.Crack = readString(dis);

					this.Ecstasy = readString(dis);

					this.Heroin = readString(dis);

					this.Ketamine = readString(dis);

					this.Legalh = readString(dis);

					this.LSD = readString(dis);

					this.Meth = readString(dis);

					this.Mushrooms = readString(dis);

					this.Nicotine = readString(dis);

					this.Semer = readString(dis);

					this.VSA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID, dos);

				// String

				writeString(this.Age, dos);

				// Character

				if (this.Gender == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Gender);
				}

				// String

				writeString(this.Education, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Ethnicity, dos);

				// String

				writeString(this.Nscore, dos);

				// String

				writeString(this.Escore, dos);

				// String

				writeString(this.Oscore, dos);

				// String

				writeString(this.Ascore, dos);

				// String

				writeString(this.Cscore, dos);

				// String

				writeString(this.Impulsivity, dos);

				// String

				writeString(this.SS, dos);

				// String

				writeString(this.Alcohol, dos);

				// String

				writeString(this.Amphet, dos);

				// String

				writeString(this.Amyl, dos);

				// String

				writeString(this.Benzos, dos);

				// String

				writeString(this.Caff, dos);

				// String

				writeString(this.Cannabis, dos);

				// String

				writeString(this.Choc, dos);

				// String

				writeString(this.Coke, dos);

				// String

				writeString(this.Crack, dos);

				// String

				writeString(this.Ecstasy, dos);

				// String

				writeString(this.Heroin, dos);

				// String

				writeString(this.Ketamine, dos);

				// String

				writeString(this.Legalh, dos);

				// String

				writeString(this.LSD, dos);

				// String

				writeString(this.Meth, dos);

				// String

				writeString(this.Mushrooms, dos);

				// String

				writeString(this.Nicotine, dos);

				// String

				writeString(this.Semer, dos);

				// String

				writeString(this.VSA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + ID);
			sb.append(",Age=" + Age);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",Education=" + Education);
			sb.append(",Country=" + Country);
			sb.append(",Ethnicity=" + Ethnicity);
			sb.append(",Nscore=" + Nscore);
			sb.append(",Escore=" + Escore);
			sb.append(",Oscore=" + Oscore);
			sb.append(",Ascore=" + Ascore);
			sb.append(",Cscore=" + Cscore);
			sb.append(",Impulsivity=" + Impulsivity);
			sb.append(",SS=" + SS);
			sb.append(",Alcohol=" + Alcohol);
			sb.append(",Amphet=" + Amphet);
			sb.append(",Amyl=" + Amyl);
			sb.append(",Benzos=" + Benzos);
			sb.append(",Caff=" + Caff);
			sb.append(",Cannabis=" + Cannabis);
			sb.append(",Choc=" + Choc);
			sb.append(",Coke=" + Coke);
			sb.append(",Crack=" + Crack);
			sb.append(",Ecstasy=" + Ecstasy);
			sb.append(",Heroin=" + Heroin);
			sb.append(",Ketamine=" + Ketamine);
			sb.append(",Legalh=" + Legalh);
			sb.append(",LSD=" + LSD);
			sb.append(",Meth=" + Meth);
			sb.append(",Mushrooms=" + Mushrooms);
			sb.append(",Nicotine=" + Nicotine);
			sb.append(",Semer=" + Semer);
			sb.append(",VSA=" + VSA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID;

		public String getID() {
			return this.ID;
		}

		public String Age;

		public String getAge() {
			return this.Age;
		}

		public Character Gender;

		public Character getGender() {
			return this.Gender;
		}

		public String Education;

		public String getEducation() {
			return this.Education;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Ethnicity;

		public String getEthnicity() {
			return this.Ethnicity;
		}

		public String Nscore;

		public String getNscore() {
			return this.Nscore;
		}

		public String Escore;

		public String getEscore() {
			return this.Escore;
		}

		public String Oscore;

		public String getOscore() {
			return this.Oscore;
		}

		public String Ascore;

		public String getAscore() {
			return this.Ascore;
		}

		public String Cscore;

		public String getCscore() {
			return this.Cscore;
		}

		public String Impulsivity;

		public String getImpulsivity() {
			return this.Impulsivity;
		}

		public String SS;

		public String getSS() {
			return this.SS;
		}

		public String Alcohol;

		public String getAlcohol() {
			return this.Alcohol;
		}

		public String Amphet;

		public String getAmphet() {
			return this.Amphet;
		}

		public String Amyl;

		public String getAmyl() {
			return this.Amyl;
		}

		public String Benzos;

		public String getBenzos() {
			return this.Benzos;
		}

		public String Caff;

		public String getCaff() {
			return this.Caff;
		}

		public String Cannabis;

		public String getCannabis() {
			return this.Cannabis;
		}

		public String Choc;

		public String getChoc() {
			return this.Choc;
		}

		public String Coke;

		public String getCoke() {
			return this.Coke;
		}

		public String Crack;

		public String getCrack() {
			return this.Crack;
		}

		public String Ecstasy;

		public String getEcstasy() {
			return this.Ecstasy;
		}

		public String Heroin;

		public String getHeroin() {
			return this.Heroin;
		}

		public String Ketamine;

		public String getKetamine() {
			return this.Ketamine;
		}

		public String Legalh;

		public String getLegalh() {
			return this.Legalh;
		}

		public String LSD;

		public String getLSD() {
			return this.LSD;
		}

		public String Meth;

		public String getMeth() {
			return this.Meth;
		}

		public String Mushrooms;

		public String getMushrooms() {
			return this.Mushrooms;
		}

		public String Nicotine;

		public String getNicotine() {
			return this.Nicotine;
		}

		public String Semer;

		public String getSemer() {
			return this.Semer;
		}

		public String VSA;

		public String getVSA() {
			return this.VSA;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_1Struct other) {

			other.ID = this.ID;
			other.Age = this.Age;
			other.Gender = this.Gender;
			other.Education = this.Education;
			other.Country = this.Country;
			other.Ethnicity = this.Ethnicity;
			other.Nscore = this.Nscore;
			other.Escore = this.Escore;
			other.Oscore = this.Oscore;
			other.Ascore = this.Ascore;
			other.Cscore = this.Cscore;
			other.Impulsivity = this.Impulsivity;
			other.SS = this.SS;
			other.Alcohol = this.Alcohol;
			other.Amphet = this.Amphet;
			other.Amyl = this.Amyl;
			other.Benzos = this.Benzos;
			other.Caff = this.Caff;
			other.Cannabis = this.Cannabis;
			other.Choc = this.Choc;
			other.Coke = this.Coke;
			other.Crack = this.Crack;
			other.Ecstasy = this.Ecstasy;
			other.Heroin = this.Heroin;
			other.Ketamine = this.Ketamine;
			other.Legalh = this.Legalh;
			other.LSD = this.LSD;
			other.Meth = this.Meth;
			other.Mushrooms = this.Mushrooms;
			other.Nicotine = this.Nicotine;
			other.Semer = this.Semer;
			other.VSA = this.VSA;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.ID = readString(dis);

					this.Age = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Gender = null;
					} else {
						this.Gender = dis.readChar();
					}

					this.Education = readString(dis);

					this.Country = readString(dis);

					this.Ethnicity = readString(dis);

					this.Nscore = readString(dis);

					this.Escore = readString(dis);

					this.Oscore = readString(dis);

					this.Ascore = readString(dis);

					this.Cscore = readString(dis);

					this.Impulsivity = readString(dis);

					this.SS = readString(dis);

					this.Alcohol = readString(dis);

					this.Amphet = readString(dis);

					this.Amyl = readString(dis);

					this.Benzos = readString(dis);

					this.Caff = readString(dis);

					this.Cannabis = readString(dis);

					this.Choc = readString(dis);

					this.Coke = readString(dis);

					this.Crack = readString(dis);

					this.Ecstasy = readString(dis);

					this.Heroin = readString(dis);

					this.Ketamine = readString(dis);

					this.Legalh = readString(dis);

					this.LSD = readString(dis);

					this.Meth = readString(dis);

					this.Mushrooms = readString(dis);

					this.Nicotine = readString(dis);

					this.Semer = readString(dis);

					this.VSA = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID, dos);

				// String

				writeString(this.Age, dos);

				// Character

				if (this.Gender == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Gender);
				}

				// String

				writeString(this.Education, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Ethnicity, dos);

				// String

				writeString(this.Nscore, dos);

				// String

				writeString(this.Escore, dos);

				// String

				writeString(this.Oscore, dos);

				// String

				writeString(this.Ascore, dos);

				// String

				writeString(this.Cscore, dos);

				// String

				writeString(this.Impulsivity, dos);

				// String

				writeString(this.SS, dos);

				// String

				writeString(this.Alcohol, dos);

				// String

				writeString(this.Amphet, dos);

				// String

				writeString(this.Amyl, dos);

				// String

				writeString(this.Benzos, dos);

				// String

				writeString(this.Caff, dos);

				// String

				writeString(this.Cannabis, dos);

				// String

				writeString(this.Choc, dos);

				// String

				writeString(this.Coke, dos);

				// String

				writeString(this.Crack, dos);

				// String

				writeString(this.Ecstasy, dos);

				// String

				writeString(this.Heroin, dos);

				// String

				writeString(this.Ketamine, dos);

				// String

				writeString(this.Legalh, dos);

				// String

				writeString(this.LSD, dos);

				// String

				writeString(this.Meth, dos);

				// String

				writeString(this.Mushrooms, dos);

				// String

				writeString(this.Nicotine, dos);

				// String

				writeString(this.Semer, dos);

				// String

				writeString(this.VSA, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + ID);
			sb.append(",Age=" + Age);
			sb.append(",Gender=" + String.valueOf(Gender));
			sb.append(",Education=" + Education);
			sb.append(",Country=" + Country);
			sb.append(",Ethnicity=" + Ethnicity);
			sb.append(",Nscore=" + Nscore);
			sb.append(",Escore=" + Escore);
			sb.append(",Oscore=" + Oscore);
			sb.append(",Ascore=" + Ascore);
			sb.append(",Cscore=" + Cscore);
			sb.append(",Impulsivity=" + Impulsivity);
			sb.append(",SS=" + SS);
			sb.append(",Alcohol=" + Alcohol);
			sb.append(",Amphet=" + Amphet);
			sb.append(",Amyl=" + Amyl);
			sb.append(",Benzos=" + Benzos);
			sb.append(",Caff=" + Caff);
			sb.append(",Cannabis=" + Cannabis);
			sb.append(",Choc=" + Choc);
			sb.append(",Coke=" + Coke);
			sb.append(",Crack=" + Crack);
			sb.append(",Ecstasy=" + Ecstasy);
			sb.append(",Heroin=" + Heroin);
			sb.append(",Ketamine=" + Ketamine);
			sb.append(",Legalh=" + Legalh);
			sb.append(",LSD=" + LSD);
			sb.append(",Meth=" + Meth);
			sb.append(",Mushrooms=" + Mushrooms);
			sb.append(",Nicotine=" + Nicotine);
			sb.append(",Semer=" + Semer);
			sb.append(",VSA=" + VSA);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row5Struct row5 = new row5Struct();
				outStruct out = new outStruct();
				row3Struct row3 = new row3Struct();
				row16Struct row16 = new row16Struct();
				row14Struct row14 = new row14Struct();
				row17Struct row17 = new row17Struct();
				row15Struct row15 = new row15Struct();
				row18Struct row18 = new row18Struct();
				out1Struct out1 = new out1Struct();
				out1Struct row21 = out1;
				row20Struct row20 = new row20Struct();
				out2Struct out2 = new out2Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row16" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "Subject";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime()
						.getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime()
						.getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null
						|| dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
					if (!properties_tDBOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1
						.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1
						.getTables("drugs", null, null,
								new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1
								.getString("TABLE_NAME");
						if (table_tDBOutput_1.equalsIgnoreCase("Subject")) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1
							.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE `"
								+ tableName_tDBOutput_1 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					stmtCreate_tDBOutput_1
							.execute("CREATE TABLE `"
									+ tableName_tDBOutput_1
									+ "`(`ID` INT(4)  ,`Age` VARCHAR(3)  ,`Gender` CHAR(1)  ,`Education` VARCHAR(3)  ,`CountryCode` VARCHAR(2)  ,`Ethnicity` VARCHAR(2)  ,primary key(`ID`))");
				}

				String insert_tDBOutput_1 = "INSERT INTO `"
						+ "Subject"
						+ "` (`ID`,`Age`,`Gender`,`Education`,`CountryCode`,`Ethnicity`) VALUES (?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row17" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;

				int rejectedCount_tDBOutput_4 = 0;

				String tableName_tDBOutput_4 = "PsychologicalData";
				boolean whetherReject_tDBOutput_4 = false;

				java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_4.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_4 = calendar_tDBOutput_4.getTime()
						.getTime();
				calendar_tDBOutput_4.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_4 = calendar_tDBOutput_4.getTime()
						.getTime();
				long date_tDBOutput_4;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbProperties_tDBOutput_4 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
				String url_tDBOutput_4 = null;
				if (dbProperties_tDBOutput_4 == null
						|| dbProperties_tDBOutput_4.trim().length() == 0) {
					url_tDBOutput_4 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_4 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
					if (!properties_tDBOutput_4
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_4 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_4 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ properties_tDBOutput_4;
				}
				String driverClass_tDBOutput_4 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_4 = "root";

				final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
				java.lang.Class.forName(driverClass_tDBOutput_4);

				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(
						url_tDBOutput_4, dbUser_tDBOutput_4, dbPwd_tDBOutput_4);

				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4
						.getMetaData();
				boolean whetherExist_tDBOutput_4 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4
						.getTables("drugs", null, null,
								new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_4.next()) {
						String table_tDBOutput_4 = rsTable_tDBOutput_4
								.getString("TABLE_NAME");
						if (table_tDBOutput_4
								.equalsIgnoreCase("PsychologicalData")) {
							whetherExist_tDBOutput_4 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_4) {
					try (java.sql.Statement stmtDrop_tDBOutput_4 = conn_tDBOutput_4
							.createStatement()) {
						stmtDrop_tDBOutput_4.execute("DROP TABLE `"
								+ tableName_tDBOutput_4 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4
						.createStatement()) {
					stmtCreate_tDBOutput_4
							.execute("CREATE TABLE `"
									+ tableName_tDBOutput_4
									+ "`(`SubjectID` INT(4)  ,`Nscore` INT(3)  ,`Escore` INT(3)  ,`Oscore` INT(3)  ,`Ascore` INT(3)  ,`Cscore` INT(3)  ,`Impulsivity` INT(2)  ,`SS` INT(4)  ,primary key(`SubjectID`))");
				}

				String insert_tDBOutput_4 = "INSERT INTO `"
						+ "PsychologicalData"
						+ "` (`SubjectID`,`Nscore`,`Escore`,`Oscore`,`Ascore`,`Cscore`,`Impulsivity`,`SS`) VALUES (?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_4 = 100;
				int batchSizeCounter_tDBOutput_4 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4
						.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tFilterColumns_2 begin ] start
				 */

				ok_Hash.put("tFilterColumns_2", false);
				start_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				currentComponent = "tFilterColumns_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row14" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterColumns_2 = 0;

				int nb_line_tFilterColumns_2 = 0;

				/**
				 * [tFilterColumns_2 begin ] stop
				 */

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out2" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;

				int rejectedCount_tDBOutput_5 = 0;

				String tableName_tDBOutput_5 = "SubstanceUsage";
				boolean whetherReject_tDBOutput_5 = false;

				java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_5.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_5 = calendar_tDBOutput_5.getTime()
						.getTime();
				calendar_tDBOutput_5.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_5 = calendar_tDBOutput_5.getTime()
						.getTime();
				long date_tDBOutput_5;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbProperties_tDBOutput_5 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
				String url_tDBOutput_5 = null;
				if (dbProperties_tDBOutput_5 == null
						|| dbProperties_tDBOutput_5.trim().length() == 0) {
					url_tDBOutput_5 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_5 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
					if (!properties_tDBOutput_5
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_5 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_5 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ properties_tDBOutput_5;
				}
				String driverClass_tDBOutput_5 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_5 = "root";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
				java.lang.Class.forName(driverClass_tDBOutput_5);

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(
						url_tDBOutput_5, dbUser_tDBOutput_5, dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_5 = conn_tDBOutput_5
						.getMetaData();
				boolean whetherExist_tDBOutput_5 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_5 = dbMetaData_tDBOutput_5
						.getTables("drugs", null, null,
								new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_5.next()) {
						String table_tDBOutput_5 = rsTable_tDBOutput_5
								.getString("TABLE_NAME");
						if (table_tDBOutput_5
								.equalsIgnoreCase("SubstanceUsage")) {
							whetherExist_tDBOutput_5 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_5) {
					try (java.sql.Statement stmtDrop_tDBOutput_5 = conn_tDBOutput_5
							.createStatement()) {
						stmtDrop_tDBOutput_5.execute("DROP TABLE `"
								+ tableName_tDBOutput_5 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_5 = conn_tDBOutput_5
						.createStatement()) {
					stmtCreate_tDBOutput_5
							.execute("CREATE TABLE `"
									+ tableName_tDBOutput_5
									+ "`(`UserID` INT(4)  ,`SubstanceID` INT(0)   not null ,`Usage` VARCHAR(255)   not null ,primary key(`UserID`,`SubstanceID`))");
				}

				String insert_tDBOutput_5 = "INSERT INTO `" + "SubstanceUsage"
						+ "` (`UserID`,`SubstanceID`,`Usage`) VALUES (?,?,?)";
				int batchSize_tDBOutput_5 = 100;
				int batchSizeCounter_tDBOutput_5 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5
						.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row20" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
					int drugNumber;
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tNormalize_1 begin ] start
				 */

				ok_Hash.put("tNormalize_1", false);
				start_Hash.put("tNormalize_1", System.currentTimeMillis());

				currentComponent = "tNormalize_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row21" + iterateId, 0,
								0);

					}
				}

				int tos_count_tNormalize_1 = 0;

				int nb_line_tNormalize_1 = 0;
				String tmp_tNormalize_1 = null;
				StringBuilder currentRecord_tNormalize_1 = null;
				String[] normalizeRecord_tNormalize_1 = null;
				java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();

				if (((String) "!").length() == 0) {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				/**
				 * [tNormalize_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out1" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row18" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
					String var1;
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFilterColumns_3 begin ] start
				 */

				ok_Hash.put("tFilterColumns_3", false);
				start_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				currentComponent = "tFilterColumns_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row15" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFilterColumns_3 = 0;

				int nb_line_tFilterColumns_3 = 0;

				/**
				 * [tFilterColumns_3 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out" + iterateId, 0, 0);

					}
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outStruct out_tmp = new outStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tConvertType_1 begin ] start
				 */

				ok_Hash.put("tConvertType_1", false);
				start_Hash.put("tConvertType_1", System.currentTimeMillis());

				currentComponent = "tConvertType_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tConvertType_1 = 0;

				int nb_line_tConvertType_1 = 0;

				/**
				 * [tConvertType_1 begin ] stop
				 */

				/**
				 * [tReplace_1 begin ] start
				 */

				ok_Hash.put("tReplace_1", false);
				start_Hash.put("tReplace_1", System.currentTimeMillis());

				currentComponent = "tReplace_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tReplace_1 = 0;

				int nb_line_tReplace_1 = 0;

				/**
				 * [tReplace_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/survey_results.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/survey_results.csv",
								"US-ASCII", ",", "\n", false, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.ID = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.Age = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();
							if (temp.length() > 0) {

								try {

									row1.Gender = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Gender", "row1",
															temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Gender = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.Education = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.Country = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.Ethnicity = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.Nscore = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.Escore = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.Oscore = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.Ascore = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.Cscore = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.Impulsivity = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row1.SS = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row1.Alcohol = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row1.Amphet = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row1.Amyl = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row1.Benzos = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row1.Caff = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row1.Cannabis = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row1.Choc = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row1.Coke = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row1.Crack = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row1.Ecstasy = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row1.Heroin = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row1.Ketamine = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 25;

							row1.Legalh = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row1.LSD = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 27;

							row1.Meth = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row1.Mushrooms = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row1.Nicotine = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row1.Semer = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row1.VSA = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tReplace_1 main ] start
							 */

							currentComponent = "tReplace_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							String searchStr_tReplace_1_1 = "S" + "";
							searchStr_tReplace_1_1 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_1_1
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row1.Nscore = StringUtils.replaceAllStrictly(
									row1.Nscore, searchStr_tReplace_1_1, ""
											+ "", false, false);
							String searchStr_tReplace_1_2 = "S" + "";
							searchStr_tReplace_1_2 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_1_2
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row1.Escore = StringUtils.replaceAllStrictly(
									row1.Escore, searchStr_tReplace_1_2, ""
											+ "", false, false);
							String searchStr_tReplace_1_3 = "S" + "";
							searchStr_tReplace_1_3 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_1_3
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row1.Oscore = StringUtils.replaceAllStrictly(
									row1.Oscore, searchStr_tReplace_1_3, ""
											+ "", false, false);
							String searchStr_tReplace_1_4 = "S" + "";
							searchStr_tReplace_1_4 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_1_4
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row1.Ascore = StringUtils.replaceAllStrictly(
									row1.Ascore, searchStr_tReplace_1_4, ""
											+ "", false, false);
							String searchStr_tReplace_1_5 = "S" + "";
							searchStr_tReplace_1_5 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_1_5
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row1.Cscore = StringUtils.replaceAllStrictly(
									row1.Cscore, searchStr_tReplace_1_5, ""
											+ "", false, false);
							String searchStr_tReplace_1_6 = "I" + "";
							searchStr_tReplace_1_6 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_1_6
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row1.Impulsivity = StringUtils.replaceAllStrictly(
									row1.Impulsivity, searchStr_tReplace_1_6,
									"" + "", false, false);
							String searchStr_tReplace_1_7 = "SS" + "";
							searchStr_tReplace_1_7 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_1_7
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row1.SS = StringUtils.replaceAllStrictly(row1.SS,
									searchStr_tReplace_1_7, "" + "", false,
									false);
							String searchStr_tReplace_1_8 = "UK" + "";
							searchStr_tReplace_1_8 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_1_8
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row1.Country = StringUtils.replaceAllStrictly(
									row1.Country, searchStr_tReplace_1_8, "GB"
											+ "", false, false);
							row2.ID = row1.ID;

							row2.Age = row1.Age;

							row2.Gender = row1.Gender;

							row2.Education = row1.Education;

							row2.Country = row1.Country;

							row2.Ethnicity = row1.Ethnicity;

							row2.Nscore = row1.Nscore;

							row2.Escore = row1.Escore;

							row2.Oscore = row1.Oscore;

							row2.Ascore = row1.Ascore;

							row2.Cscore = row1.Cscore;

							row2.Impulsivity = row1.Impulsivity;

							row2.SS = row1.SS;

							row2.Alcohol = row1.Alcohol;

							row2.Amphet = row1.Amphet;

							row2.Amyl = row1.Amyl;

							row2.Benzos = row1.Benzos;

							row2.Caff = row1.Caff;

							row2.Cannabis = row1.Cannabis;

							row2.Choc = row1.Choc;

							row2.Coke = row1.Coke;

							row2.Crack = row1.Crack;

							row2.Ecstasy = row1.Ecstasy;

							row2.Heroin = row1.Heroin;

							row2.Ketamine = row1.Ketamine;

							row2.Legalh = row1.Legalh;

							row2.LSD = row1.LSD;

							row2.Meth = row1.Meth;

							row2.Mushrooms = row1.Mushrooms;

							row2.Nicotine = row1.Nicotine;

							row2.Semer = row1.Semer;

							row2.VSA = row1.VSA;

							nb_line_tReplace_1++;

							tos_count_tReplace_1++;

							/**
							 * [tReplace_1 main ] stop
							 */

							/**
							 * [tReplace_1 process_data_begin ] start
							 */

							currentComponent = "tReplace_1";

							/**
							 * [tReplace_1 process_data_begin ] stop
							 */

							/**
							 * [tConvertType_1 main ] start
							 */

							currentComponent = "tConvertType_1";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							row5 = new row5Struct();
							boolean bHasError_tConvertType_1 = false;
							try {
								row5.ID = TypeConvert.String2Integer(row2.ID);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Age = TypeConvert.String2String(row2.Age);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Gender = TypeConvert
										.Character2Character(row2.Gender);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Education = TypeConvert
										.String2String(row2.Education);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Country = TypeConvert
										.String2String(row2.Country);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Ethnicity = TypeConvert
										.String2String(row2.Ethnicity);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Nscore = TypeConvert
										.String2Integer(row2.Nscore);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Escore = TypeConvert
										.String2Integer(row2.Escore);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Oscore = TypeConvert
										.String2Integer(row2.Oscore);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Ascore = TypeConvert
										.String2Integer(row2.Ascore);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Cscore = TypeConvert
										.String2Integer(row2.Cscore);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Impulsivity = TypeConvert
										.String2Integer(row2.Impulsivity);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.SS = TypeConvert.String2Integer(row2.SS);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Alcohol = TypeConvert
										.String2String(row2.Alcohol);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Amphet = TypeConvert
										.String2String(row2.Amphet);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Amyl = TypeConvert
										.String2String(row2.Amyl);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Benzos = TypeConvert
										.String2String(row2.Benzos);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Caff = TypeConvert
										.String2String(row2.Caff);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Cannabis = TypeConvert
										.String2String(row2.Cannabis);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Choc = TypeConvert
										.String2String(row2.Choc);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Coke = TypeConvert
										.String2String(row2.Coke);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Crack = TypeConvert
										.String2String(row2.Crack);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Ecstasy = TypeConvert
										.String2String(row2.Ecstasy);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Heroin = TypeConvert
										.String2String(row2.Heroin);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Ketamine = TypeConvert
										.String2String(row2.Ketamine);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Legalh = TypeConvert
										.String2String(row2.Legalh);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.LSD = TypeConvert.String2String(row2.LSD);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Meth = TypeConvert
										.String2String(row2.Meth);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Mushrooms = TypeConvert
										.String2String(row2.Mushrooms);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Nicotine = TypeConvert
										.String2String(row2.Nicotine);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.Semer = TypeConvert
										.String2String(row2.Semer);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							try {
								row5.VSA = TypeConvert.String2String(row2.VSA);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_1 = true;
								System.err.println(e.getMessage());
							}
							if (bHasError_tConvertType_1) {
								row5 = null;
							}

							nb_line_tConvertType_1++;

							tos_count_tConvertType_1++;

							/**
							 * [tConvertType_1 main ] stop
							 */

							/**
							 * [tConvertType_1 process_data_begin ] start
							 */

							currentComponent = "tConvertType_1";

							/**
							 * [tConvertType_1 process_data_begin ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								// row5
								// row5

								if (execStat) {
									runStat.updateStatOnConnection("row5"
											+ iterateId, 1, 1);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row7"
								// /////////////////////////////////////////////

								boolean forceLooprow7 = false;

								row7Struct row7ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row7HashKey.alpha_2 = row5.Country;

									row7HashKey.hashCodeDirty = true;

									tHash_Lookup_row7.lookup(row7HashKey);

									if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_1 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row7 != null
										&& tHash_Lookup_row7
												.getCount(row7HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.alpha_2 = '"
									// + row7HashKey.alpha_2 + "'");
								} // G 071

								row7Struct row7 = null;

								row7Struct fromLookup_row7 = null;
								row7 = row7Default;

								if (tHash_Lookup_row7 != null
										&& tHash_Lookup_row7.hasNext()) { // G
																			// 099

									fromLookup_row7 = tHash_Lookup_row7.next();

								} // G 099

								if (fromLookup_row7 != null) {
									row7 = fromLookup_row7;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									out = null;

									if (!rejectedInnerJoin_tMap_1) {

										// # Output table : 'out'
										out_tmp.ID = row5.ID;
										out_tmp.Age = row5.Age;
										out_tmp.Gender = row5.Gender;
										out_tmp.Education = row5.Education;
										out_tmp.CountryCode = row7.alpha_2;
										out_tmp.Ethnicity = row5.Ethnicity;
										out_tmp.Nscore = row5.Nscore;
										out_tmp.Escore = row5.Escore;
										out_tmp.Oscore = row5.Oscore;
										out_tmp.Ascore = row5.Ascore;
										out_tmp.Cscore = row5.Cscore;
										out_tmp.Impulsivity = row5.Impulsivity;
										out_tmp.SS = row5.SS;
										out_tmp.Alcohol = row5.Alcohol;
										out_tmp.Amphet = row5.Amphet;
										out_tmp.Amyl = row5.Amyl;
										out_tmp.Benzos = row5.Benzos;
										out_tmp.Caff = row5.Caff;
										out_tmp.Cannabis = row5.Cannabis;
										out_tmp.Choc = row5.Choc;
										out_tmp.Coke = row5.Coke;
										out_tmp.Crack = row5.Crack;
										out_tmp.Ecstasy = row5.Ecstasy;
										out_tmp.Heroin = row5.Heroin;
										out_tmp.Ketamine = row5.Ketamine;
										out_tmp.Legalh = row5.Legalh;
										out_tmp.LSD = row5.LSD;
										out_tmp.Meth = row5.Meth;
										out_tmp.Mushrooms = row5.Mushrooms;
										out_tmp.Nicotine = row5.Nicotine;
										out_tmp.Semer = row5.Semer;
										out_tmp.VSA = row5.VSA;
										out = out_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
								// Start of branch "out"
								if (out != null) {

									/**
									 * [tReplicate_1 main ] start
									 */

									currentComponent = "tReplicate_1";

									// out
									// out

									if (execStat) {
										runStat.updateStatOnConnection("out"
												+ iterateId, 1, 1);
									}

									row3 = new row3Struct();

									row3.ID = out.ID;
									row3.Age = out.Age;
									row3.Gender = out.Gender;
									row3.Education = out.Education;
									row3.CountryCode = out.CountryCode;
									row3.Ethnicity = out.Ethnicity;
									row3.Nscore = out.Nscore;
									row3.Escore = out.Escore;
									row3.Oscore = out.Oscore;
									row3.Ascore = out.Ascore;
									row3.Cscore = out.Cscore;
									row3.Impulsivity = out.Impulsivity;
									row3.SS = out.SS;
									row3.Alcohol = out.Alcohol;
									row3.Amphet = out.Amphet;
									row3.Amyl = out.Amyl;
									row3.Benzos = out.Benzos;
									row3.Caff = out.Caff;
									row3.Cannabis = out.Cannabis;
									row3.Choc = out.Choc;
									row3.Coke = out.Coke;
									row3.Crack = out.Crack;
									row3.Ecstasy = out.Ecstasy;
									row3.Heroin = out.Heroin;
									row3.Ketamine = out.Ketamine;
									row3.Legalh = out.Legalh;
									row3.LSD = out.LSD;
									row3.Meth = out.Meth;
									row3.Mushrooms = out.Mushrooms;
									row3.Nicotine = out.Nicotine;
									row3.Semer = out.Semer;
									row3.VSA = out.VSA;
									row14 = new row14Struct();

									row14.ID = out.ID;
									row14.Age = out.Age;
									row14.Gender = out.Gender;
									row14.Education = out.Education;
									row14.CountryCode = out.CountryCode;
									row14.Ethnicity = out.Ethnicity;
									row14.Nscore = out.Nscore;
									row14.Escore = out.Escore;
									row14.Oscore = out.Oscore;
									row14.Ascore = out.Ascore;
									row14.Cscore = out.Cscore;
									row14.Impulsivity = out.Impulsivity;
									row14.SS = out.SS;
									row14.Alcohol = out.Alcohol;
									row14.Amphet = out.Amphet;
									row14.Amyl = out.Amyl;
									row14.Benzos = out.Benzos;
									row14.Caff = out.Caff;
									row14.Cannabis = out.Cannabis;
									row14.Choc = out.Choc;
									row14.Coke = out.Coke;
									row14.Crack = out.Crack;
									row14.Ecstasy = out.Ecstasy;
									row14.Heroin = out.Heroin;
									row14.Ketamine = out.Ketamine;
									row14.Legalh = out.Legalh;
									row14.LSD = out.LSD;
									row14.Meth = out.Meth;
									row14.Mushrooms = out.Mushrooms;
									row14.Nicotine = out.Nicotine;
									row14.Semer = out.Semer;
									row14.VSA = out.VSA;
									row15 = new row15Struct();

									row15.ID = out.ID;
									row15.Age = out.Age;
									row15.Gender = out.Gender;
									row15.Education = out.Education;
									row15.CountryCode = out.CountryCode;
									row15.Ethnicity = out.Ethnicity;
									row15.Nscore = out.Nscore;
									row15.Escore = out.Escore;
									row15.Oscore = out.Oscore;
									row15.Ascore = out.Ascore;
									row15.Cscore = out.Cscore;
									row15.Impulsivity = out.Impulsivity;
									row15.SS = out.SS;
									row15.Alcohol = out.Alcohol;
									row15.Amphet = out.Amphet;
									row15.Amyl = out.Amyl;
									row15.Benzos = out.Benzos;
									row15.Caff = out.Caff;
									row15.Cannabis = out.Cannabis;
									row15.Choc = out.Choc;
									row15.Coke = out.Coke;
									row15.Crack = out.Crack;
									row15.Ecstasy = out.Ecstasy;
									row15.Heroin = out.Heroin;
									row15.Ketamine = out.Ketamine;
									row15.Legalh = out.Legalh;
									row15.LSD = out.LSD;
									row15.Meth = out.Meth;
									row15.Mushrooms = out.Mushrooms;
									row15.Nicotine = out.Nicotine;
									row15.Semer = out.Semer;
									row15.VSA = out.VSA;

									tos_count_tReplicate_1++;

									/**
									 * [tReplicate_1 main ] stop
									 */

									/**
									 * [tReplicate_1 process_data_begin ] start
									 */

									currentComponent = "tReplicate_1";

									/**
									 * [tReplicate_1 process_data_begin ] stop
									 */

									/**
									 * [tFilterColumns_1 main ] start
									 */

									currentComponent = "tFilterColumns_1";

									// row3
									// row3

									if (execStat) {
										runStat.updateStatOnConnection("row3"
												+ iterateId, 1, 1);
									}

									row16.ID = row3.ID;

									row16.Age = row3.Age;

									row16.Gender = row3.Gender;

									row16.Education = row3.Education;

									row16.CountryCode = row3.CountryCode;

									row16.Ethnicity = row3.Ethnicity;

									nb_line_tFilterColumns_1++;

									tos_count_tFilterColumns_1++;

									/**
									 * [tFilterColumns_1 main ] stop
									 */

									/**
									 * [tFilterColumns_1 process_data_begin ]
									 * start
									 */

									currentComponent = "tFilterColumns_1";

									/**
									 * [tFilterColumns_1 process_data_begin ]
									 * stop
									 */

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									// row16
									// row16

									if (execStat) {
										runStat.updateStatOnConnection("row16"
												+ iterateId, 1, 1);
									}

									whetherReject_tDBOutput_1 = false;
									if (row16.ID == null) {
										pstmt_tDBOutput_1.setNull(1,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(1, row16.ID);
									}

									if (row16.Age == null) {
										pstmt_tDBOutput_1.setNull(2,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(2,
												row16.Age);
									}

									if (row16.Gender == null) {
										pstmt_tDBOutput_1.setNull(3,
												java.sql.Types.CHAR);
									} else {
										if (row16.Gender == null) {
											pstmt_tDBOutput_1.setNull(3,
													java.sql.Types.CHAR);
										} else if (row16.Gender == ' ') {
											pstmt_tDBOutput_1.setString(3, "");
										} else {
											pstmt_tDBOutput_1
													.setString(
															3,
															String.valueOf(row16.Gender));
										}
									}

									if (row16.Education == null) {
										pstmt_tDBOutput_1.setNull(4,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(4,
												row16.Education);
									}

									if (row16.CountryCode == null) {
										pstmt_tDBOutput_1.setNull(5,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(5,
												row16.CountryCode);
									}

									if (row16.Ethnicity == null) {
										pstmt_tDBOutput_1.setNull(6,
												java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(6,
												row16.Ethnicity);
									}

									pstmt_tDBOutput_1.addBatch();
									nb_line_tDBOutput_1++;

									batchSizeCounter_tDBOutput_1++;
									if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
										try {
											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
													.executeBatch()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
														: 1);
											}
											insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : e
													.getUpdateCounts()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}
											insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											System.err.println(e.getMessage());
										}

										batchSizeCounter_tDBOutput_1 = 0;
									}
									commitCounter_tDBOutput_1++;

									if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

										try {
											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
													.executeBatch()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: 1);
											}
											insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : e
													.getUpdateCounts()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}
											insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											System.err.println(e.getMessage());

										}
										conn_tDBOutput_1.commit();
										commitCounter_tDBOutput_1 = 0;

									}

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

									/**
									 * [tFilterColumns_1 process_data_end ]
									 * start
									 */

									currentComponent = "tFilterColumns_1";

									/**
									 * [tFilterColumns_1 process_data_end ] stop
									 */

									/**
									 * [tFilterColumns_2 main ] start
									 */

									currentComponent = "tFilterColumns_2";

									// row14
									// row14

									if (execStat) {
										runStat.updateStatOnConnection("row14"
												+ iterateId, 1, 1);
									}

									row17.ID = row14.ID;

									row17.Nscore = row14.Nscore;

									row17.Escore = row14.Escore;

									row17.Oscore = row14.Oscore;

									row17.Ascore = row14.Ascore;

									row17.Cscore = row14.Cscore;

									row17.Impulsivity = row14.Impulsivity;

									row17.SS = row14.SS;

									nb_line_tFilterColumns_2++;

									tos_count_tFilterColumns_2++;

									/**
									 * [tFilterColumns_2 main ] stop
									 */

									/**
									 * [tFilterColumns_2 process_data_begin ]
									 * start
									 */

									currentComponent = "tFilterColumns_2";

									/**
									 * [tFilterColumns_2 process_data_begin ]
									 * stop
									 */

									/**
									 * [tDBOutput_4 main ] start
									 */

									currentComponent = "tDBOutput_4";

									// row17
									// row17

									if (execStat) {
										runStat.updateStatOnConnection("row17"
												+ iterateId, 1, 1);
									}

									whetherReject_tDBOutput_4 = false;
									if (row17.ID == null) {
										pstmt_tDBOutput_4.setNull(1,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_4.setInt(1, row17.ID);
									}

									if (row17.Nscore == null) {
										pstmt_tDBOutput_4.setNull(2,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_4.setInt(2,
												row17.Nscore);
									}

									if (row17.Escore == null) {
										pstmt_tDBOutput_4.setNull(3,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_4.setInt(3,
												row17.Escore);
									}

									if (row17.Oscore == null) {
										pstmt_tDBOutput_4.setNull(4,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_4.setInt(4,
												row17.Oscore);
									}

									if (row17.Ascore == null) {
										pstmt_tDBOutput_4.setNull(5,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_4.setInt(5,
												row17.Ascore);
									}

									if (row17.Cscore == null) {
										pstmt_tDBOutput_4.setNull(6,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_4.setInt(6,
												row17.Cscore);
									}

									if (row17.Impulsivity == null) {
										pstmt_tDBOutput_4.setNull(7,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_4.setInt(7,
												row17.Impulsivity);
									}

									if (row17.SS == null) {
										pstmt_tDBOutput_4.setNull(8,
												java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_4.setInt(8, row17.SS);
									}

									pstmt_tDBOutput_4.addBatch();
									nb_line_tDBOutput_4++;

									batchSizeCounter_tDBOutput_4++;
									if (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4) {
										try {
											int countSum_tDBOutput_4 = 0;
											for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
													.executeBatch()) {
												countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0
														: 1);
											}
											insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_4 = 0;
											for (int countEach_tDBOutput_4 : e
													.getUpdateCounts()) {
												countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
														: countEach_tDBOutput_4);
											}
											insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
											System.err.println(e.getMessage());
										}

										batchSizeCounter_tDBOutput_4 = 0;
									}
									commitCounter_tDBOutput_4++;

									if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

										try {
											int countSum_tDBOutput_4 = 0;
											for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
													.executeBatch()) {
												countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
														: 1);
											}
											insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_4 = 0;
											for (int countEach_tDBOutput_4 : e
													.getUpdateCounts()) {
												countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
														: countEach_tDBOutput_4);
											}
											insertedCount_tDBOutput_4 += countSum_tDBOutput_4;
											System.err.println(e.getMessage());

										}
										conn_tDBOutput_4.commit();
										commitCounter_tDBOutput_4 = 0;

									}

									tos_count_tDBOutput_4++;

									/**
									 * [tDBOutput_4 main ] stop
									 */

									/**
									 * [tDBOutput_4 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_4";

									/**
									 * [tDBOutput_4 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_4 process_data_end ] start
									 */

									currentComponent = "tDBOutput_4";

									/**
									 * [tDBOutput_4 process_data_end ] stop
									 */

									/**
									 * [tFilterColumns_2 process_data_end ]
									 * start
									 */

									currentComponent = "tFilterColumns_2";

									/**
									 * [tFilterColumns_2 process_data_end ] stop
									 */

									/**
									 * [tFilterColumns_3 main ] start
									 */

									currentComponent = "tFilterColumns_3";

									// row15
									// row15

									if (execStat) {
										runStat.updateStatOnConnection("row15"
												+ iterateId, 1, 1);
									}

									row18.ID = row15.ID;

									row18.Alcohol = row15.Alcohol;

									row18.Amphet = row15.Amphet;

									row18.Amyl = row15.Amyl;

									row18.Benzos = row15.Benzos;

									row18.Caff = row15.Caff;

									row18.Cannabis = row15.Cannabis;

									row18.Choc = row15.Choc;

									row18.Coke = row15.Coke;

									row18.Crack = row15.Crack;

									row18.Ecstasy = row15.Ecstasy;

									row18.Heroin = row15.Heroin;

									row18.Ketamine = row15.Ketamine;

									row18.Legalh = row15.Legalh;

									row18.LSD = row15.LSD;

									row18.Meth = row15.Meth;

									row18.Mushrooms = row15.Mushrooms;

									row18.Nicotine = row15.Nicotine;

									row18.Semer = row15.Semer;

									row18.VSA = row15.VSA;

									nb_line_tFilterColumns_3++;

									tos_count_tFilterColumns_3++;

									/**
									 * [tFilterColumns_3 main ] stop
									 */

									/**
									 * [tFilterColumns_3 process_data_begin ]
									 * start
									 */

									currentComponent = "tFilterColumns_3";

									/**
									 * [tFilterColumns_3 process_data_begin ]
									 * stop
									 */

									/**
									 * [tMap_3 main ] start
									 */

									currentComponent = "tMap_3";

									// row18
									// row18

									if (execStat) {
										runStat.updateStatOnConnection("row18"
												+ iterateId, 1, 1);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_3 = false;
									boolean mainRowRejected_tMap_3 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_3__Struct Var = Var__tMap_3;
										Var.var1 = row18.Alcohol + "!"
												+ row18.Amphet + "!"
												+ row18.Amyl + "!"
												+ row18.Benzos + "!"
												+ row18.Caff + "!"
												+ row18.Cannabis + "!"
												+ row18.Choc + "!" + row18.Coke
												+ "!" + row18.Crack + "!"
												+ row18.Ecstasy + "!"
												+ row18.Heroin + "!"
												+ row18.Ketamine + "!"
												+ row18.Legalh + "!"
												+ row18.LSD + "!" + row18.Meth
												+ "!" + row18.Mushrooms + "!"
												+ row18.Nicotine + "!"
												+ row18.Semer + "!" + row18.VSA;// ###############################
										// ###############################
										// # Output tables

										out1 = null;

										// # Output table : 'out1'
										out1_tmp.ID = row18.ID;
										out1_tmp.DrugUsages = Var.var1;
										out1 = out1_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_3 = false;

									tos_count_tMap_3++;

									/**
									 * [tMap_3 main ] stop
									 */

									/**
									 * [tMap_3 process_data_begin ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_begin ] stop
									 */
									// Start of branch "out1"
									if (out1 != null) {

										/**
										 * [tLogRow_1 main ] start
										 */

										currentComponent = "tLogRow_1";

										// out1
										// out1

										if (execStat) {
											runStat.updateStatOnConnection(
													"out1" + iterateId, 1, 1);
										}

										row21 = out1;

										tos_count_tLogRow_1++;

										/**
										 * [tLogRow_1 main ] stop
										 */

										/**
										 * [tLogRow_1 process_data_begin ] start
										 */

										currentComponent = "tLogRow_1";

										/**
										 * [tLogRow_1 process_data_begin ] stop
										 */

										/**
										 * [tNormalize_1 main ] start
										 */

										currentComponent = "tNormalize_1";

										// row21
										// row21

										if (execStat) {
											runStat.updateStatOnConnection(
													"row21" + iterateId, 1, 1);
										}

										normalizeRecord_tNormalize_1 = new String[1];
										if (row21.DrugUsages != null) {
											if ("".equals(row21.DrugUsages)) {
												normalizeRecord_tNormalize_1[0] = "";
											} else {

												normalizeRecord_tNormalize_1 = row21.DrugUsages
														.split("!", -1);

											}
										}
										int lastNoEmptyIndex_tNormalize_1 = normalizeRecord_tNormalize_1.length;

										for (int i_tNormalize_1 = 0; i_tNormalize_1 < lastNoEmptyIndex_tNormalize_1; i_tNormalize_1++) {

											currentRecord_tNormalize_1 = new StringBuilder();
											nb_line_tNormalize_1++;

											row20.ID = row21.ID;

											row20.DrugUsages = normalizeRecord_tNormalize_1[i_tNormalize_1];

											tos_count_tNormalize_1++;

											/**
											 * [tNormalize_1 main ] stop
											 */

											/**
											 * [tNormalize_1 process_data_begin
											 * ] start
											 */

											currentComponent = "tNormalize_1";

											/**
											 * [tNormalize_1 process_data_begin
											 * ] stop
											 */

											/**
											 * [tMap_5 main ] start
											 */

											currentComponent = "tMap_5";

											// row20
											// row20

											if (execStat) {
												runStat.updateStatOnConnection(
														"row20" + iterateId, 1,
														1);
											}

											boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_5 = false;
											boolean mainRowRejected_tMap_5 = false;

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_5__Struct Var = Var__tMap_5;
												Var.drugNumber = Numeric
														.sequence(
																row20.ID + "",
																1, 1);// ###############################
												// ###############################
												// # Output tables

												out2 = null;

												// # Output table : 'out2'
												out2_tmp.UserID = row20.ID;
												out2_tmp.drugNumber = Var.drugNumber;
												out2_tmp.DrugUsages = row20.DrugUsages;
												out2 = out2_tmp;
												// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_5 = false;

											tos_count_tMap_5++;

											/**
											 * [tMap_5 main ] stop
											 */

											/**
											 * [tMap_5 process_data_begin ]
											 * start
											 */

											currentComponent = "tMap_5";

											/**
											 * [tMap_5 process_data_begin ] stop
											 */
											// Start of branch "out2"
											if (out2 != null) {

												/**
												 * [tDBOutput_5 main ] start
												 */

												currentComponent = "tDBOutput_5";

												// out2
												// out2

												if (execStat) {
													runStat.updateStatOnConnection(
															"out2" + iterateId,
															1, 1);
												}

												whetherReject_tDBOutput_5 = false;
												if (out2.UserID == null) {
													pstmt_tDBOutput_5
															.setNull(
																	1,
																	java.sql.Types.INTEGER);
												} else {
													pstmt_tDBOutput_5.setInt(1,
															out2.UserID);
												}

												pstmt_tDBOutput_5.setInt(2,
														out2.drugNumber);

												if (out2.DrugUsages == null) {
													pstmt_tDBOutput_5
															.setNull(
																	3,
																	java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_5
															.setString(
																	3,
																	out2.DrugUsages);
												}

												pstmt_tDBOutput_5.addBatch();
												nb_line_tDBOutput_5++;

												batchSizeCounter_tDBOutput_5++;
												if (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5) {
													try {
														int countSum_tDBOutput_5 = 0;
														for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
																.executeBatch()) {
															countSum_tDBOutput_5 += (countEach_tDBOutput_5 == java.sql.Statement.EXECUTE_FAILED ? 0
																	: 1);
														}
														insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
													} catch (java.sql.BatchUpdateException e) {
														int countSum_tDBOutput_5 = 0;
														for (int countEach_tDBOutput_5 : e
																.getUpdateCounts()) {
															countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
																	: countEach_tDBOutput_5);
														}
														insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
														System.err.println(e
																.getMessage());
													}

													batchSizeCounter_tDBOutput_5 = 0;
												}
												commitCounter_tDBOutput_5++;

												if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {

													try {
														int countSum_tDBOutput_5 = 0;
														for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
																.executeBatch()) {
															countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
																	: 1);
														}
														insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
													} catch (java.sql.BatchUpdateException e) {
														int countSum_tDBOutput_5 = 0;
														for (int countEach_tDBOutput_5 : e
																.getUpdateCounts()) {
															countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
																	: countEach_tDBOutput_5);
														}
														insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
														System.err.println(e
																.getMessage());

													}
													conn_tDBOutput_5.commit();
													commitCounter_tDBOutput_5 = 0;

												}

												tos_count_tDBOutput_5++;

												/**
												 * [tDBOutput_5 main ] stop
												 */

												/**
												 * [tDBOutput_5
												 * process_data_begin ] start
												 */

												currentComponent = "tDBOutput_5";

												/**
												 * [tDBOutput_5
												 * process_data_begin ] stop
												 */

												/**
												 * [tDBOutput_5 process_data_end
												 * ] start
												 */

												currentComponent = "tDBOutput_5";

												/**
												 * [tDBOutput_5 process_data_end
												 * ] stop
												 */

											} // End of branch "out2"

											/**
											 * [tMap_5 process_data_end ] start
											 */

											currentComponent = "tMap_5";

											/**
											 * [tMap_5 process_data_end ] stop
											 */
											// end for
										}

										/**
										 * [tNormalize_1 process_data_end ]
										 * start
										 */

										currentComponent = "tNormalize_1";

										/**
										 * [tNormalize_1 process_data_end ] stop
										 */

										/**
										 * [tLogRow_1 process_data_end ] start
										 */

										currentComponent = "tLogRow_1";

										/**
										 * [tLogRow_1 process_data_end ] stop
										 */

									} // End of branch "out1"

									/**
									 * [tMap_3 process_data_end ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_end ] stop
									 */

									/**
									 * [tFilterColumns_3 process_data_end ]
									 * start
									 */

									currentComponent = "tFilterColumns_3";

									/**
									 * [tFilterColumns_3 process_data_end ] stop
									 */

									/**
									 * [tReplicate_1 process_data_end ] start
									 */

									currentComponent = "tReplicate_1";

									/**
									 * [tReplicate_1 process_data_end ] stop
									 */

								} // End of branch "out"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row5"

							/**
							 * [tConvertType_1 process_data_end ] start
							 */

							currentComponent = "tConvertType_1";

							/**
							 * [tConvertType_1 process_data_end ] stop
							 */

							/**
							 * [tReplace_1 process_data_end ] start
							 */

							currentComponent = "tReplace_1";

							/**
							 * [tReplace_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/survey_results.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tReplace_1 end ] start
				 */

				currentComponent = "tReplace_1";

				globalMap.put("tReplace_1_NB_LINE", nb_line_tReplace_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tReplace_1", true);
				end_Hash.put("tReplace_1", System.currentTimeMillis());

				/**
				 * [tReplace_1 end ] stop
				 */

				/**
				 * [tConvertType_1 end ] start
				 */

				currentComponent = "tConvertType_1";

				globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tConvertType_1", true);
				end_Hash.put("tConvertType_1", System.currentTimeMillis());

				/**
				 * [tConvertType_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE",
						nb_line_tFilterColumns_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
								: countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row16" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tFilterColumns_2 end ] start
				 */

				currentComponent = "tFilterColumns_2";

				globalMap.put("tFilterColumns_2_NB_LINE",
						nb_line_tFilterColumns_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row14" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterColumns_2", true);
				end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				/**
				 * [tFilterColumns_2 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (batchSizeCounter_tDBOutput_4 != 0) {
						int countSum_tDBOutput_4 = 0;

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4
								.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
								: countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_4 = 0;

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");

				}
				resourceMap.put("statementClosed_tDBOutput_4", true);
				if (commitCounter_tDBOutput_4 > 0) {

					conn_tDBOutput_4.commit();

				}

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4
						+ deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4
						+ updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4
						+ insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4
						+ rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row17" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

				/**
				 * [tFilterColumns_3 end ] start
				 */

				currentComponent = "tFilterColumns_3";

				globalMap.put("tFilterColumns_3_NB_LINE",
						nb_line_tFilterColumns_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row15" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFilterColumns_3", true);
				end_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				/**
				 * [tFilterColumns_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row18" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tNormalize_1 end ] start
				 */

				currentComponent = "tNormalize_1";

				globalMap.put("tNormalize_1_NB_LINE", nb_line_tNormalize_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row21" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tNormalize_1", true);
				end_Hash.put("tNormalize_1", System.currentTimeMillis());

				/**
				 * [tNormalize_1 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row20" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (batchSizeCounter_tDBOutput_5 != 0) {
						int countSum_tDBOutput_5 = 0;

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
								.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
								: countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_5 = 0;

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");

				}
				resourceMap.put("statementClosed_tDBOutput_5", true);
				if (commitCounter_tDBOutput_5 > 0) {

					conn_tDBOutput_5.commit();

				}

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5
						+ deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5
						+ updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5
						+ insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5
						+ rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row7");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tReplace_1 finally ] start
				 */

				currentComponent = "tReplace_1";

				/**
				 * [tReplace_1 finally ] stop
				 */

				/**
				 * [tConvertType_1 finally ] start
				 */

				currentComponent = "tConvertType_1";

				/**
				 * [tConvertType_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_2 finally ] start
				 */

				currentComponent = "tFilterColumns_2";

				/**
				 * [tFilterColumns_2 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

				/**
				 * [tFilterColumns_3 finally ] start
				 */

				currentComponent = "tFilterColumns_3";

				/**
				 * [tFilterColumns_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tNormalize_1 finally ] start
				 */

				currentComponent = "tNormalize_1";

				/**
				 * [tNormalize_1 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String name;

		public String getName() {
			return this.name;
		}

		public String alpha_2;

		public String getAlpha_2() {
			return this.alpha_2;
		}

		public String alpha_3;

		public String getAlpha_3() {
			return this.alpha_3;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public String iso_3166_2;

		public String getIso_3166_2() {
			return this.iso_3166_2;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String sub_region;

		public String getSub_region() {
			return this.sub_region;
		}

		public String intermediate_region;

		public String getIntermediate_region() {
			return this.intermediate_region;
		}

		public String region_code;

		public String getRegion_code() {
			return this.region_code;
		}

		public String sub_region_code;

		public String getSub_region_code() {
			return this.sub_region_code;
		}

		public String intermediate_region_code;

		public String getIntermediate_region_code() {
			return this.intermediate_region_code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.alpha_2 == null) ? 0 : this.alpha_2.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.alpha_2 == null) {
				if (other.alpha_2 != null)
					return false;

			} else if (!this.alpha_2.equals(other.alpha_2))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.name = this.name;
			other.alpha_2 = this.alpha_2;
			other.alpha_3 = this.alpha_3;
			other.country_code = this.country_code;
			other.iso_3166_2 = this.iso_3166_2;
			other.region = this.region;
			other.sub_region = this.sub_region;
			other.intermediate_region = this.intermediate_region;
			other.region_code = this.region_code;
			other.sub_region_code = this.sub_region_code;
			other.intermediate_region_code = this.intermediate_region_code;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.alpha_2 = this.alpha_2;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.alpha_2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.alpha_2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.name = readString(dis, ois);

				this.alpha_3 = readString(dis, ois);

				this.country_code = readString(dis, ois);

				this.iso_3166_2 = readString(dis, ois);

				this.region = readString(dis, ois);

				this.sub_region = readString(dis, ois);

				this.intermediate_region = readString(dis, ois);

				this.region_code = readString(dis, ois);

				this.sub_region_code = readString(dis, ois);

				this.intermediate_region_code = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.name, dos, oos);

				writeString(this.alpha_3, dos, oos);

				writeString(this.country_code, dos, oos);

				writeString(this.iso_3166_2, dos, oos);

				writeString(this.region, dos, oos);

				writeString(this.sub_region, dos, oos);

				writeString(this.intermediate_region, dos, oos);

				writeString(this.region_code, dos, oos);

				writeString(this.sub_region_code, dos, oos);

				writeString(this.intermediate_region_code, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",alpha_2=" + alpha_2);
			sb.append(",alpha_3=" + alpha_3);
			sb.append(",country_code=" + country_code);
			sb.append(",iso_3166_2=" + iso_3166_2);
			sb.append(",region=" + region);
			sb.append(",sub_region=" + sub_region);
			sb.append(",intermediate_region=" + intermediate_region);
			sb.append(",region_code=" + region_code);
			sb.append(",sub_region_code=" + sub_region_code);
			sb.append(",intermediate_region_code=" + intermediate_region_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.alpha_2, other.alpha_2);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String name;

		public String getName() {
			return this.name;
		}

		public String alpha_2;

		public String getAlpha_2() {
			return this.alpha_2;
		}

		public String alpha_3;

		public String getAlpha_3() {
			return this.alpha_3;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public String iso_3166_2;

		public String getIso_3166_2() {
			return this.iso_3166_2;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String sub_region;

		public String getSub_region() {
			return this.sub_region;
		}

		public String intermediate_region;

		public String getIntermediate_region() {
			return this.intermediate_region;
		}

		public String region_code;

		public String getRegion_code() {
			return this.region_code;
		}

		public String sub_region_code;

		public String getSub_region_code() {
			return this.sub_region_code;
		}

		public String intermediate_region_code;

		public String getIntermediate_region_code() {
			return this.intermediate_region_code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.alpha_2 == null) ? 0 : this.alpha_2.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.alpha_2 == null) {
				if (other.alpha_2 != null)
					return false;

			} else if (!this.alpha_2.equals(other.alpha_2))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.name = this.name;
			other.alpha_2 = this.alpha_2;
			other.alpha_3 = this.alpha_3;
			other.country_code = this.country_code;
			other.iso_3166_2 = this.iso_3166_2;
			other.region = this.region;
			other.sub_region = this.sub_region;
			other.intermediate_region = this.intermediate_region;
			other.region_code = this.region_code;
			other.sub_region_code = this.sub_region_code;
			other.intermediate_region_code = this.intermediate_region_code;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.alpha_2 = this.alpha_2;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.alpha_2 = readString(dis);

					this.alpha_3 = readString(dis);

					this.country_code = readString(dis);

					this.iso_3166_2 = readString(dis);

					this.region = readString(dis);

					this.sub_region = readString(dis);

					this.intermediate_region = readString(dis);

					this.region_code = readString(dis);

					this.sub_region_code = readString(dis);

					this.intermediate_region_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.alpha_2, dos);

				// String

				writeString(this.alpha_3, dos);

				// String

				writeString(this.country_code, dos);

				// String

				writeString(this.iso_3166_2, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.sub_region, dos);

				// String

				writeString(this.intermediate_region, dos);

				// String

				writeString(this.region_code, dos);

				// String

				writeString(this.sub_region_code, dos);

				// String

				writeString(this.intermediate_region_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",alpha_2=" + alpha_2);
			sb.append(",alpha_3=" + alpha_3);
			sb.append(",country_code=" + country_code);
			sb.append(",iso_3166_2=" + iso_3166_2);
			sb.append(",region=" + region);
			sb.append(",sub_region=" + sub_region);
			sb.append(",intermediate_region=" + intermediate_region);
			sb.append(",region_code=" + region_code);
			sb.append(",sub_region_code=" + sub_region_code);
			sb.append(",intermediate_region_code=" + intermediate_region_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.alpha_2, other.alpha_2);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tDBOutput_3 - inputs:(row4) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_1 - inputs:(row5,row7) outputs:(out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;

				int rejectedCount_tDBOutput_3 = 0;

				String tableName_tDBOutput_3 = "Country";
				boolean whetherReject_tDBOutput_3 = false;

				java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_3 = calendar_tDBOutput_3.getTime()
						.getTime();
				calendar_tDBOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_3 = calendar_tDBOutput_3.getTime()
						.getTime();
				long date_tDBOutput_3;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbProperties_tDBOutput_3 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
				String url_tDBOutput_3 = null;
				if (dbProperties_tDBOutput_3 == null
						|| dbProperties_tDBOutput_3.trim().length() == 0) {
					url_tDBOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_3 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
					if (!properties_tDBOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ properties_tDBOutput_3;
				}
				String driverClass_tDBOutput_3 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_3 = "root";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				java.lang.Class.forName(driverClass_tDBOutput_3);

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(
						url_tDBOutput_3, dbUser_tDBOutput_3, dbPwd_tDBOutput_3);

				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 1;
				int commitCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3
						.getMetaData();
				boolean whetherExist_tDBOutput_3 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3
						.getTables("drugs", null, null,
								new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_3.next()) {
						String table_tDBOutput_3 = rsTable_tDBOutput_3
								.getString("TABLE_NAME");
						if (table_tDBOutput_3.equalsIgnoreCase("Country")) {
							whetherExist_tDBOutput_3 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtDrop_tDBOutput_3 = conn_tDBOutput_3
							.createStatement()) {
						stmtDrop_tDBOutput_3.execute("DROP TABLE `"
								+ tableName_tDBOutput_3 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3
						.createStatement()) {
					stmtCreate_tDBOutput_3
							.execute("CREATE TABLE `"
									+ tableName_tDBOutput_3
									+ "`(`name` VARCHAR(64)  ,`alpha_2` VARCHAR(2)  ,`alpha_3` VARCHAR(3)  ,`country_code` VARCHAR(3)  ,`iso_3166_2` VARCHAR(13)  ,`region` VARCHAR(13)  ,`sub_region` VARCHAR(31)  ,`intermediate_region` VARCHAR(31)  ,`region_code` VARCHAR(9)  ,`sub_region_code` VARCHAR(3)  ,`intermediate_region_code` VARCHAR(3)  ,primary key(`alpha_2`))");
				}

				String insert_tDBOutput_3 = "INSERT INTO `"
						+ "Country"
						+ "` (`name`,`alpha_2`,`alpha_3`,`country_code`,`iso_3166_2`,`region`,`sub_region`,`intermediate_region`,`region_code`,`sub_region_code`,`intermediate_region_code`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_3 = 100;
				int batchSizeCounter_tDBOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3
						.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				"/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/countries.csv"/**
				 * 
				 * End field tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('\"');

						csvReadertFileInputDelimited_2.setEscapeChar('\\');

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_2.readNext()) {

								rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
										.getValues();
								if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_2[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_2++;

								}

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('\"');

							csvReadertFileInputDelimited_2.setEscapeChar('\\');

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						if (rowtFileInputDelimited_2.length == 1
								&& ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row4 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row4 = new row4Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row4.name = null;

								row4.alpha_2 = null;

								row4.alpha_3 = null;

								row4.country_code = null;

								row4.iso_3166_2 = null;

								row4.region = null;

								row4.sub_region = null;

								row4.intermediate_region = null;

								row4.region_code = null;

								row4.sub_region_code = null;

								row4.intermediate_region_code = null;

							} else {

								for (int i_tFileInputDelimited_2 = 0; i_tFileInputDelimited_2 < rowtFileInputDelimited_2.length; i_tFileInputDelimited_2++) {
									rowtFileInputDelimited_2[i_tFileInputDelimited_2] = rowtFileInputDelimited_2[i_tFileInputDelimited_2]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.alpha_2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.alpha_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.alpha_3 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.alpha_3 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.country_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.country_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.iso_3166_2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.iso_3166_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.region = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.region = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.sub_region = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.sub_region = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.intermediate_region = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.intermediate_region = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.region_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.region_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.sub_region_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.sub_region_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.intermediate_region_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.intermediate_region_code = null;

								}

							}

							int filedsum = rowtFileInputDelimited_2.length;
							if (filedsum < (11)) {
								throw new java.lang.Exception(
										"Column(s) missing");
							} else if (filedsum > (11)) {
								throw new RuntimeException("Too many columns");
							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							// row4
							// row4

							if (execStat) {
								runStat.updateStatOnConnection("row4"
										+ iterateId, 1, 1);
							}

							row7 = null;
							row7 = null;
							whetherReject_tDBOutput_3 = false;
							if (row4.name == null) {
								pstmt_tDBOutput_3.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(1, row4.name);
							}

							if (row4.alpha_2 == null) {
								pstmt_tDBOutput_3.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(2, row4.alpha_2);
							}

							if (row4.alpha_3 == null) {
								pstmt_tDBOutput_3.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(3, row4.alpha_3);
							}

							if (row4.country_code == null) {
								pstmt_tDBOutput_3.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(4,
										row4.country_code);
							}

							if (row4.iso_3166_2 == null) {
								pstmt_tDBOutput_3.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(5, row4.iso_3166_2);
							}

							if (row4.region == null) {
								pstmt_tDBOutput_3.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(6, row4.region);
							}

							if (row4.sub_region == null) {
								pstmt_tDBOutput_3.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(7, row4.sub_region);
							}

							if (row4.intermediate_region == null) {
								pstmt_tDBOutput_3.setNull(8,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(8,
										row4.intermediate_region);
							}

							if (row4.region_code == null) {
								pstmt_tDBOutput_3.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3
										.setString(9, row4.region_code);
							}

							if (row4.sub_region_code == null) {
								pstmt_tDBOutput_3.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(10,
										row4.sub_region_code);
							}

							if (row4.intermediate_region_code == null) {
								pstmt_tDBOutput_3.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(11,
										row4.intermediate_region_code);
							}

							pstmt_tDBOutput_3.addBatch();
							nb_line_tDBOutput_3++;

							batchSizeCounter_tDBOutput_3++;
							if (!whetherReject_tDBOutput_3) {
								row7 = new row7Struct();
								row7.name = row4.name;
								row7.alpha_2 = row4.alpha_2;
								row7.alpha_3 = row4.alpha_3;
								row7.country_code = row4.country_code;
								row7.iso_3166_2 = row4.iso_3166_2;
								row7.region = row4.region;
								row7.sub_region = row4.sub_region;
								row7.intermediate_region = row4.intermediate_region;
								row7.region_code = row4.region_code;
								row7.sub_region_code = row4.sub_region_code;
								row7.intermediate_region_code = row4.intermediate_region_code;
								row7 = new row7Struct();
								row7.name = row4.name;
								row7.alpha_2 = row4.alpha_2;
								row7.alpha_3 = row4.alpha_3;
								row7.country_code = row4.country_code;
								row7.iso_3166_2 = row4.iso_3166_2;
								row7.region = row4.region;
								row7.sub_region = row4.sub_region;
								row7.intermediate_region = row4.intermediate_region;
								row7.region_code = row4.region_code;
								row7.sub_region_code = row4.sub_region_code;
								row7.intermediate_region_code = row4.intermediate_region_code;
							}
							if (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
								try {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0
												: 1);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_3 = 0;
							}
							commitCounter_tDBOutput_3++;

							if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

								try {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
											.executeBatch()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_3 = 0;
									for (int countEach_tDBOutput_3 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
												: countEach_tDBOutput_3);
									}
									insertedCount_tDBOutput_3 += countSum_tDBOutput_3;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_3.commit();
								commitCounter_tDBOutput_3 = 0;

							}

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_begin ] stop
							 */
							// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tAdvancedHash_row7 main ] start
								 */

								currentComponent = "tAdvancedHash_row7";

								// row7
								// row7

								if (execStat) {
									runStat.updateStatOnConnection("row7"
											+ iterateId, 1, 1);
								}

								row7Struct row7_HashRow = new row7Struct();

								row7_HashRow.name = row7.name;

								row7_HashRow.alpha_2 = row7.alpha_2;

								row7_HashRow.alpha_3 = row7.alpha_3;

								row7_HashRow.country_code = row7.country_code;

								row7_HashRow.iso_3166_2 = row7.iso_3166_2;

								row7_HashRow.region = row7.region;

								row7_HashRow.sub_region = row7.sub_region;

								row7_HashRow.intermediate_region = row7.intermediate_region;

								row7_HashRow.region_code = row7.region_code;

								row7_HashRow.sub_region_code = row7.sub_region_code;

								row7_HashRow.intermediate_region_code = row7.intermediate_region_code;

								tHash_Lookup_row7.put(row7_HashRow);

								tos_count_tAdvancedHash_row7++;

								/**
								 * [tAdvancedHash_row7 main ] stop
								 */

								/**
								 * [tAdvancedHash_row7 process_data_begin ]
								 * start
								 */

								currentComponent = "tAdvancedHash_row7";

								/**
								 * [tAdvancedHash_row7 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row7 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row7";

								/**
								 * [tAdvancedHash_row7 process_data_end ] stop
								 */

							} // End of branch "row7"

							/**
							 * [tDBOutput_3 process_data_end ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (batchSizeCounter_tDBOutput_3 != 0) {
						int countSum_tDBOutput_3 = 0;

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3
								.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_3 = 0;
					for (int countEach_tDBOutput_3 : e.getUpdateCounts()) {
						countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
								: countEach_tDBOutput_3);
					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_3 = 0;

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");

				}
				resourceMap.put("statementClosed_tDBOutput_3", true);
				if (commitCounter_tDBOutput_3 > 0) {

					conn_tDBOutput_3.commit();

				}

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3
						+ deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3
						+ updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3
						+ insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3
						+ rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer DrugID;

		public Integer getDrugID() {
			return this.DrugID;
		}

		public String Unit;

		public String getUnit() {
			return this.Unit;
		}

		public String Specifics;

		public String getSpecifics() {
			return this.Specifics;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public String Measure_Names;

		public String getMeasure_Names() {
			return this.Measure_Names;
		}

		public Double To;

		public Double getTo() {
			return this.To;
		}

		public Double From;

		public Double getFrom() {
			return this.From;
		}

		public Double Typical;

		public Double getTypical() {
			return this.Typical;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.CountryCode = readString(dis);

					this.DrugID = readInteger(dis);

					this.Unit = readString(dis);

					this.Specifics = readString(dis);

					this.Year = readInteger(dis);

					this.Measure_Names = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.To = null;
					} else {
						this.To = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.From = null;
					} else {
						this.From = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Typical = null;
					} else {
						this.Typical = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.DrugID, dos);

				// String

				writeString(this.Unit, dos);

				// String

				writeString(this.Specifics, dos);

				// Integer

				writeInteger(this.Year, dos);

				// String

				writeString(this.Measure_Names, dos);

				// Double

				if (this.To == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.To);
				}

				// Double

				if (this.From == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.From);
				}

				// Double

				if (this.Typical == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Typical);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryCode=" + CountryCode);
			sb.append(",DrugID=" + String.valueOf(DrugID));
			sb.append(",Unit=" + Unit);
			sb.append(",Specifics=" + Specifics);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Measure_Names=" + Measure_Names);
			sb.append(",To=" + String.valueOf(To));
			sb.append(",From=" + String.valueOf(From));
			sb.append(",Typical=" + String.valueOf(Typical));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer DrugID;

		public Integer getDrugID() {
			return this.DrugID;
		}

		public String Unit;

		public String getUnit() {
			return this.Unit;
		}

		public String Specifics;

		public String getSpecifics() {
			return this.Specifics;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public String Measure_Names;

		public String getMeasure_Names() {
			return this.Measure_Names;
		}

		public String To;

		public String getTo() {
			return this.To;
		}

		public String From;

		public String getFrom() {
			return this.From;
		}

		public String Typical;

		public String getTypical() {
			return this.Typical;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.CountryCode = readString(dis);

					this.DrugID = readInteger(dis);

					this.Unit = readString(dis);

					this.Specifics = readString(dis);

					this.Year = readInteger(dis);

					this.Measure_Names = readString(dis);

					this.To = readString(dis);

					this.From = readString(dis);

					this.Typical = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.DrugID, dos);

				// String

				writeString(this.Unit, dos);

				// String

				writeString(this.Specifics, dos);

				// Integer

				writeInteger(this.Year, dos);

				// String

				writeString(this.Measure_Names, dos);

				// String

				writeString(this.To, dos);

				// String

				writeString(this.From, dos);

				// String

				writeString(this.Typical, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryCode=" + CountryCode);
			sb.append(",DrugID=" + String.valueOf(DrugID));
			sb.append(",Unit=" + Unit);
			sb.append(",Specifics=" + Specifics);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Measure_Names=" + Measure_Names);
			sb.append(",To=" + To);
			sb.append(",From=" + From);
			sb.append(",Typical=" + Typical);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer DrugID;

		public Integer getDrugID() {
			return this.DrugID;
		}

		public String Unit;

		public String getUnit() {
			return this.Unit;
		}

		public String Specifics;

		public String getSpecifics() {
			return this.Specifics;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public String Measure_Names;

		public String getMeasure_Names() {
			return this.Measure_Names;
		}

		public String To;

		public String getTo() {
			return this.To;
		}

		public String From;

		public String getFrom() {
			return this.From;
		}

		public String Typical;

		public String getTypical() {
			return this.Typical;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.CountryCode = readString(dis);

					this.DrugID = readInteger(dis);

					this.Unit = readString(dis);

					this.Specifics = readString(dis);

					this.Year = readInteger(dis);

					this.Measure_Names = readString(dis);

					this.To = readString(dis);

					this.From = readString(dis);

					this.Typical = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.DrugID, dos);

				// String

				writeString(this.Unit, dos);

				// String

				writeString(this.Specifics, dos);

				// Integer

				writeInteger(this.Year, dos);

				// String

				writeString(this.Measure_Names, dos);

				// String

				writeString(this.To, dos);

				// String

				writeString(this.From, dos);

				// String

				writeString(this.Typical, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryCode=" + CountryCode);
			sb.append(",DrugID=" + String.valueOf(DrugID));
			sb.append(",Unit=" + Unit);
			sb.append(",Specifics=" + Specifics);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Measure_Names=" + Measure_Names);
			sb.append(",To=" + To);
			sb.append(",From=" + From);
			sb.append(",Typical=" + Typical);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer DrugID;

		public Integer getDrugID() {
			return this.DrugID;
		}

		public String Unit;

		public String getUnit() {
			return this.Unit;
		}

		public String Specifics;

		public String getSpecifics() {
			return this.Specifics;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public String Measure_Names;

		public String getMeasure_Names() {
			return this.Measure_Names;
		}

		public String Measure_Values;

		public String getMeasure_Values() {
			return this.Measure_Values;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.CountryCode = readString(dis);

					this.DrugID = readInteger(dis);

					this.Unit = readString(dis);

					this.Specifics = readString(dis);

					this.Year = readInteger(dis);

					this.Measure_Names = readString(dis);

					this.Measure_Values = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.DrugID, dos);

				// String

				writeString(this.Unit, dos);

				// String

				writeString(this.Specifics, dos);

				// Integer

				writeInteger(this.Year, dos);

				// String

				writeString(this.Measure_Names, dos);

				// String

				writeString(this.Measure_Values, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryCode=" + CountryCode);
			sb.append(",DrugID=" + String.valueOf(DrugID));
			sb.append(",Unit=" + Unit);
			sb.append(",Specifics=" + Specifics);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Measure_Names=" + Measure_Names);
			sb.append(",Measure_Values=" + Measure_Values);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer DrugID;

		public Integer getDrugID() {
			return this.DrugID;
		}

		public String Unit;

		public String getUnit() {
			return this.Unit;
		}

		public String Specifics;

		public String getSpecifics() {
			return this.Specifics;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public String Measure_Names;

		public String getMeasure_Names() {
			return this.Measure_Names;
		}

		public Double Measure_Values;

		public Double getMeasure_Values() {
			return this.Measure_Values;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.CountryCode = readString(dis);

					this.DrugID = readInteger(dis);

					this.Unit = readString(dis);

					this.Specifics = readString(dis);

					this.Year = readInteger(dis);

					this.Measure_Names = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Measure_Values = null;
					} else {
						this.Measure_Values = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.DrugID, dos);

				// String

				writeString(this.Unit, dos);

				// String

				writeString(this.Specifics, dos);

				// Integer

				writeInteger(this.Year, dos);

				// String

				writeString(this.Measure_Names, dos);

				// Double

				if (this.Measure_Values == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Measure_Values);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryCode=" + CountryCode);
			sb.append(",DrugID=" + String.valueOf(DrugID));
			sb.append(",Unit=" + Unit);
			sb.append(",Specifics=" + Specifics);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Measure_Names=" + Measure_Names);
			sb.append(",Measure_Values=" + String.valueOf(Measure_Values));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtSortRow_1 implements
			routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer DrugID;

		public Integer getDrugID() {
			return this.DrugID;
		}

		public String Unit;

		public String getUnit() {
			return this.Unit;
		}

		public String Specifics;

		public String getSpecifics() {
			return this.Specifics;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public String Measure_Names;

		public String getMeasure_Names() {
			return this.Measure_Names;
		}

		public Double Measure_Values;

		public Double getMeasure_Values() {
			return this.Measure_Values;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.CountryCode = readString(dis);

					this.DrugID = readInteger(dis);

					this.Unit = readString(dis);

					this.Specifics = readString(dis);

					this.Year = readInteger(dis);

					this.Measure_Names = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Measure_Values = null;
					} else {
						this.Measure_Values = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.DrugID, dos);

				// String

				writeString(this.Unit, dos);

				// String

				writeString(this.Specifics, dos);

				// Integer

				writeInteger(this.Year, dos);

				// String

				writeString(this.Measure_Names, dos);

				// Double

				if (this.Measure_Values == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Measure_Values);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryCode=" + CountryCode);
			sb.append(",DrugID=" + String.valueOf(DrugID));
			sb.append(",Unit=" + Unit);
			sb.append(",Specifics=" + Specifics);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Measure_Names=" + Measure_Names);
			sb.append(",Measure_Values=" + String.valueOf(Measure_Values));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtSortRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outpStruct implements
			routines.system.IPersistableRow<outpStruct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public Integer DrugID;

		public Integer getDrugID() {
			return this.DrugID;
		}

		public String Unit;

		public String getUnit() {
			return this.Unit;
		}

		public String Specifics;

		public String getSpecifics() {
			return this.Specifics;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public String Measure_Names;

		public String getMeasure_Names() {
			return this.Measure_Names;
		}

		public Double Measure_Values;

		public Double getMeasure_Values() {
			return this.Measure_Values;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.CountryCode = readString(dis);

					this.DrugID = readInteger(dis);

					this.Unit = readString(dis);

					this.Specifics = readString(dis);

					this.Year = readInteger(dis);

					this.Measure_Names = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Measure_Values = null;
					} else {
						this.Measure_Values = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryCode, dos);

				// Integer

				writeInteger(this.DrugID, dos);

				// String

				writeString(this.Unit, dos);

				// String

				writeString(this.Specifics, dos);

				// Integer

				writeInteger(this.Year, dos);

				// String

				writeString(this.Measure_Names, dos);

				// Double

				if (this.Measure_Values == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Measure_Values);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryCode=" + CountryCode);
			sb.append(",DrugID=" + String.valueOf(DrugID));
			sb.append(",Unit=" + Unit);
			sb.append(",Specifics=" + Specifics);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Measure_Names=" + Measure_Names);
			sb.append(",Measure_Values=" + String.valueOf(Measure_Values));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outpStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Drug;

		public String getDrug() {
			return this.Drug;
		}

		public String Measure_Names;

		public String getMeasure_Names() {
			return this.Measure_Names;
		}

		public String Specifics;

		public String getSpecifics() {
			return this.Specifics;
		}

		public String Unit;

		public String getUnit() {
			return this.Unit;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public Double Measure_Values;

		public Double getMeasure_Values() {
			return this.Measure_Values;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Drug = readString(dis);

					this.Measure_Names = readString(dis);

					this.Specifics = readString(dis);

					this.Unit = readString(dis);

					this.Year = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Measure_Values = null;
					} else {
						this.Measure_Values = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Drug, dos);

				// String

				writeString(this.Measure_Names, dos);

				// String

				writeString(this.Specifics, dos);

				// String

				writeString(this.Unit, dos);

				// Integer

				writeInteger(this.Year, dos);

				// Double

				if (this.Measure_Values == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Measure_Values);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Country=" + Country);
			sb.append(",Drug=" + Drug);
			sb.append(",Measure_Names=" + Measure_Names);
			sb.append(",Specifics=" + Specifics);
			sb.append(",Unit=" + Unit);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Measure_Values=" + String.valueOf(Measure_Values));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_3Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Drug;

		public String getDrug() {
			return this.Drug;
		}

		public String Measure_Names;

		public String getMeasure_Names() {
			return this.Measure_Names;
		}

		public String Specifics;

		public String getSpecifics() {
			return this.Specifics;
		}

		public String Unit;

		public String getUnit() {
			return this.Unit;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public Double Measure_Values;

		public Double getMeasure_Values() {
			return this.Measure_Values;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Drug = readString(dis);

					this.Measure_Names = readString(dis);

					this.Specifics = readString(dis);

					this.Unit = readString(dis);

					this.Year = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Measure_Values = null;
					} else {
						this.Measure_Values = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Drug, dos);

				// String

				writeString(this.Measure_Names, dos);

				// String

				writeString(this.Specifics, dos);

				// String

				writeString(this.Unit, dos);

				// Integer

				writeInteger(this.Year, dos);

				// Double

				if (this.Measure_Values == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Measure_Values);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Country=" + Country);
			sb.append(",Drug=" + Drug);
			sb.append(",Measure_Names=" + Measure_Names);
			sb.append(",Specifics=" + Specifics);
			sb.append(",Unit=" + Unit);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Measure_Values=" + String.valueOf(Measure_Values));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_4Process(globalMap);
				tFileInputDelimited_5Process(globalMap);

				row6Struct row6 = new row6Struct();
				outpStruct outp = new outpStruct();
				row10Struct row10 = new row10Struct();
				row9Struct row9 = new row9Struct();
				row11Struct row11 = new row11Struct();
				row13Struct row13 = new row13Struct();
				row12Struct row12 = new row12Struct();

				/**
				 * [tSortRow_1_SortOut begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortOut", false);
				start_Hash
						.put("tSortRow_1_SortOut", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("outp" + iterateId, 0, 0);

					}
				}

				int tos_count_tSortRow_1_SortOut = 0;

				class ComparableoutpStruct extends outpStruct implements
						Comparable<ComparableoutpStruct> {

					public int compareTo(ComparableoutpStruct other) {

						if (this.CountryCode == null
								&& other.CountryCode != null) {
							return -1;

						} else if (this.CountryCode != null
								&& other.CountryCode == null) {
							return 1;

						} else if (this.CountryCode != null
								&& other.CountryCode != null) {
							if (!this.CountryCode.equals(other.CountryCode)) {
								return this.CountryCode
										.compareTo(other.CountryCode);
							}
						}
						String thisSDrugID = this.DrugID == null ? "null"
								: String.valueOf(this.DrugID);
						String otherSDrugID = other.DrugID == null ? "null"
								: String.valueOf(other.DrugID);
						if (!thisSDrugID.equals(otherSDrugID)) {
							return thisSDrugID.compareTo(otherSDrugID);

						}
						if (this.Specifics == null && other.Specifics != null) {
							return -1;

						} else if (this.Specifics != null
								&& other.Specifics == null) {
							return 1;

						} else if (this.Specifics != null
								&& other.Specifics != null) {
							if (!this.Specifics.equals(other.Specifics)) {
								return this.Specifics
										.compareTo(other.Specifics);
							}
						}
						if (this.Unit == null && other.Unit != null) {
							return -1;

						} else if (this.Unit != null && other.Unit == null) {
							return 1;

						} else if (this.Unit != null && other.Unit != null) {
							if (!this.Unit.equals(other.Unit)) {
								return this.Unit.compareTo(other.Unit);
							}
						}
						String thisSYear = this.Year == null ? "null" : String
								.valueOf(this.Year);
						String otherSYear = other.Year == null ? "null"
								: String.valueOf(other.Year);
						if (!thisSYear.equals(otherSYear)) {
							return thisSYear.compareTo(otherSYear);

						}
						return 0;
					}
				}

				java.util.List<ComparableoutpStruct> list_tSortRow_1_SortOut = new java.util.ArrayList<ComparableoutpStruct>();

				/**
				 * [tSortRow_1_SortOut begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				tHash_Lookup_row8.initGet();

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
						.get("tHash_Lookup_row22"));

				tHash_Lookup_row22.initGet();

				row22Struct row22HashKey = new row22Struct();
				row22Struct row22Default = new row22Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outpStruct outp_tmp = new outpStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = "/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/drug_prices.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/drug_prices.csv",
								"UTF-8", ",", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row6 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row6 = new row6Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row6.Country = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row6.Drug = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 2;

							row6.Measure_Names = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 3;

							row6.Specifics = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 4;

							row6.Unit = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 5;

							temp = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();
							if (temp.length() > 0) {

								try {

									row6.Year = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Year", "row6",
															temp,
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
								}

							} else {

								row6.Year = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 6;

							temp = fid_tFileInputDelimited_3.get(
									columnIndexWithD_tFileInputDelimited_3)
									.trim();
							if (temp.length() > 0) {

								try {

									row6.Measure_Values = ParserUtils
											.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Measure_Values",
															"row6", temp,
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
								}

							} else {

								row6.Measure_Values = null;

							}

							int filedsum = fid_tFileInputDelimited_3
									.getColumnsCountOfCurrentRow();
							if (filedsum < (7)) {
								throw new RuntimeException("Column(s) missing");
							} else if (filedsum > (7)) {
								throw new RuntimeException("Too many columns");
							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
						// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							// row6
							// row6

							if (execStat) {
								runStat.updateStatOnConnection("row6"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row8"
							// /////////////////////////////////////////////

							boolean forceLooprow8 = false;

							row8Struct row8ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								tHash_Lookup_row8.lookup(row8HashKey);

								if (!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

									forceLooprow8 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow8 = true;
							} // G 21

							row8Struct row8 = null;

							while ((tHash_Lookup_row8 != null && tHash_Lookup_row8
									.hasNext()) || forceLooprow8) { // G_TM_M_043

								// CALL close loop of lookup 'row8'

								row8Struct fromLookup_row8 = null;
								row8 = row8Default;

								if (!forceLooprow8) { // G 46

									fromLookup_row8 = tHash_Lookup_row8.next();

									if (fromLookup_row8 != null) {
										row8 = fromLookup_row8;
									}

								} // G 46

								forceLooprow8 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row22"
								// /////////////////////////////////////////////

								boolean forceLooprow22 = false;

								row22Struct row22ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									tHash_Lookup_row22.lookup(row22HashKey);

									if (!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

										forceLooprow22 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow22 = true;
								} // G 21

								row22Struct row22 = null;

								while ((tHash_Lookup_row22 != null && tHash_Lookup_row22
										.hasNext()) || forceLooprow22) { // G_TM_M_043

									// CALL close loop of lookup 'row22'

									row22Struct fromLookup_row22 = null;
									row22 = row22Default;

									if (!forceLooprow22) { // G 46

										fromLookup_row22 = tHash_Lookup_row22
												.next();

										if (fromLookup_row22 != null) {
											row22 = fromLookup_row22;
										}

									} // G 46

									forceLooprow22 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
										// ###############################
										// # Output tables

										outp = null;

										// # Output table : 'outp'
										// # Filter conditions
										if (

										(row8.name
												.equalsIgnoreCase(row6.Country)
												|| row8.name
														.toLowerCase()
														.startsWith(
																row6.Country
																		.toLowerCase())
												|| row6.Country
														.toLowerCase()
														.startsWith(
																row8.name
																		.toLowerCase())
												|| (row6.Country
														.equals("China, Hong Kong SAR") && row8.name
														.equals("Honk Kong")) || (row6.Country
												.equals("China, Macao SAR") && row8.name
												.equals("Macao")))
												&& (row6.Drug
														.equalsIgnoreCase(row22.Substance)
														|| row22.Substance
																.toLowerCase()
																.startsWith(
																		row6.Drug
																				.toLowerCase()) || row6.Drug
														.toLowerCase()
														.startsWith(
																row22.Substance
																		.toLowerCase()))

										) {
											outp_tmp.CountryCode = row8.alpha_2;
											outp_tmp.DrugID = row22.Id;
											outp_tmp.Unit = row6.Unit;
											outp_tmp.Specifics = row6.Specifics;
											outp_tmp.Year = row6.Year;
											outp_tmp.Measure_Names = row6.Measure_Names;
											outp_tmp.Measure_Values = row6.Measure_Values;
											outp = outp_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_2 = false;

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */

									/**
									 * [tMap_2 process_data_begin ] start
									 */

									currentComponent = "tMap_2";

									/**
									 * [tMap_2 process_data_begin ] stop
									 */
									// Start of branch "outp"
									if (outp != null) {

										/**
										 * [tSortRow_1_SortOut main ] start
										 */

										currentVirtualComponent = "tSortRow_1";

										currentComponent = "tSortRow_1_SortOut";

										// outp
										// outp

										if (execStat) {
											runStat.updateStatOnConnection(
													"outp" + iterateId, 1, 1);
										}

										ComparableoutpStruct arrayRowtSortRow_1_SortOut = new ComparableoutpStruct();

										arrayRowtSortRow_1_SortOut.CountryCode = outp.CountryCode;
										arrayRowtSortRow_1_SortOut.DrugID = outp.DrugID;
										arrayRowtSortRow_1_SortOut.Unit = outp.Unit;
										arrayRowtSortRow_1_SortOut.Specifics = outp.Specifics;
										arrayRowtSortRow_1_SortOut.Year = outp.Year;
										arrayRowtSortRow_1_SortOut.Measure_Names = outp.Measure_Names;
										arrayRowtSortRow_1_SortOut.Measure_Values = outp.Measure_Values;
										list_tSortRow_1_SortOut
												.add(arrayRowtSortRow_1_SortOut);

										tos_count_tSortRow_1_SortOut++;

										/**
										 * [tSortRow_1_SortOut main ] stop
										 */

										/**
										 * [tSortRow_1_SortOut
										 * process_data_begin ] start
										 */

										currentVirtualComponent = "tSortRow_1";

										currentComponent = "tSortRow_1_SortOut";

										/**
										 * [tSortRow_1_SortOut
										 * process_data_begin ] stop
										 */

										/**
										 * [tSortRow_1_SortOut process_data_end
										 * ] start
										 */

										currentVirtualComponent = "tSortRow_1";

										currentComponent = "tSortRow_1_SortOut";

										/**
										 * [tSortRow_1_SortOut process_data_end
										 * ] stop
										 */

									} // End of branch "outp"

								} // close loop of lookup 'row22' // G_TM_M_043

							} // close loop of lookup 'row8' // G_TM_M_043

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/drug_prices.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				if (tHash_Lookup_row22 != null) {
					tHash_Lookup_row22.endGet();
				}
				globalMap.remove("tHash_Lookup_row22");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tSortRow_1_SortOut end ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				outpStruct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut
						.toArray(new ComparableoutpStruct[0]);

				java.util.Arrays.sort(array_tSortRow_1_SortOut);

				globalMap.put("tSortRow_1", array_tSortRow_1_SortOut);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("outp" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tSortRow_1_SortOut", true);
				end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortOut end ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;

				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "SubstancePrice";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime()
						.getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime()
						.getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbProperties_tDBOutput_2 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
				String url_tDBOutput_2 = null;
				if (dbProperties_tDBOutput_2 == null
						|| dbProperties_tDBOutput_2.trim().length() == 0) {
					url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_2 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
					if (!properties_tDBOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ properties_tDBOutput_2;
				}
				String driverClass_tDBOutput_2 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_2 = "root";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				java.lang.Class.forName(driverClass_tDBOutput_2);

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(
						url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2
						.getMetaData();
				boolean whetherExist_tDBOutput_2 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2
						.getTables("drugs", null, null,
								new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_2.next()) {
						String table_tDBOutput_2 = rsTable_tDBOutput_2
								.getString("TABLE_NAME");
						if (table_tDBOutput_2
								.equalsIgnoreCase("SubstancePrice")) {
							whetherExist_tDBOutput_2 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2
							.createStatement()) {
						stmtDrop_tDBOutput_2.execute("DROP TABLE `"
								+ tableName_tDBOutput_2 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2
						.createStatement()) {
					stmtCreate_tDBOutput_2
							.execute("CREATE TABLE `"
									+ tableName_tDBOutput_2
									+ "`(`CountryCode` VARCHAR(11)  ,`SubstanceID` INT(23)  ,`Unit` VARCHAR(255)  ,`Specifics` VARCHAR(255)  ,`Year` INT(4)  ,`TypicalPrice` DOUBLE ,`FromPrice` DOUBLE ,`ToPrice` DOUBLE )");
				}

				String insert_tDBOutput_2 = "INSERT INTO `"
						+ "SubstancePrice"
						+ "` (`CountryCode`,`SubstanceID`,`Unit`,`Specifics`,`Year`,`TypicalPrice`,`FromPrice`,`ToPrice`) VALUES (?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_2 = 100;
				int batchSizeCounter_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tConvertType_2 begin ] start
				 */

				ok_Hash.put("tConvertType_2", false);
				start_Hash.put("tConvertType_2", System.currentTimeMillis());

				currentComponent = "tConvertType_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row13" + iterateId, 0,
								0);

					}
				}

				int tos_count_tConvertType_2 = 0;

				int nb_line_tConvertType_2 = 0;

				/**
				 * [tConvertType_2 begin ] stop
				 */

				/**
				 * [tReplace_2 begin ] start
				 */

				ok_Hash.put("tReplace_2", false);
				start_Hash.put("tReplace_2", System.currentTimeMillis());

				currentComponent = "tReplace_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tReplace_2 = 0;

				int nb_line_tReplace_2 = 0;

				/**
				 * [tReplace_2 begin ] stop
				 */

				/**
				 * [tExtractDelimitedFields_1 begin ] start
				 */

				ok_Hash.put("tExtractDelimitedFields_1", false);
				start_Hash.put("tExtractDelimitedFields_1",
						System.currentTimeMillis());

				currentComponent = "tExtractDelimitedFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractDelimitedFields_1 = 0;

				int nb_line_tExtractDelimitedFields_1 = 0;

				/**
				 * [tExtractDelimitedFields_1 begin ] stop
				 */

				/**
				 * [tDenormalizeSortedRow_1 begin ] start
				 */

				ok_Hash.put("tDenormalizeSortedRow_1", false);
				start_Hash.put("tDenormalizeSortedRow_1",
						System.currentTimeMillis());

				currentComponent = "tDenormalizeSortedRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDenormalizeSortedRow_1 = 0;

				int nb_line_tDenormalizeSortedRow_1 = 0;
				final row9Struct[] emmitArray_tDenormalizeSortedRow_1 = new row9Struct[2];
				emmitArray_tDenormalizeSortedRow_1[0] = new row9Struct();
				emmitArray_tDenormalizeSortedRow_1[1] = new row9Struct();
				int currentRowIndex_tDenormalizeSortedRow_1 = 0;
				boolean flag_tDenormalizeSortedRow_1 = true;// flag for the
															// encounter of
															// first row.

				String group_CountryCode_tDenormalizeSortedRow_1 = null;
				Integer group_DrugID_tDenormalizeSortedRow_1 = null;
				String group_Unit_tDenormalizeSortedRow_1 = null;
				String group_Specifics_tDenormalizeSortedRow_1 = null;
				Integer group_Year_tDenormalizeSortedRow_1 = null;
				StringBuilder denormalize_Measure_Names_tDenormalizeSortedRow_1 = new StringBuilder();
				StringBuilder denormalize_Measure_Values_tDenormalizeSortedRow_1 = new StringBuilder();

				/**
				 * [tDenormalizeSortedRow_1 begin ] stop
				 */

				/**
				 * [tSortRow_1_SortIn begin ] start
				 */

				ok_Hash.put("tSortRow_1_SortIn", false);
				start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				int tos_count_tSortRow_1_SortIn = 0;

				outpStruct[] array_tSortRow_1_SortIn = (outpStruct[]) globalMap
						.remove("tSortRow_1");

				int nb_line_tSortRow_1_SortIn = 0;

				outpStruct current_tSortRow_1_SortIn = null;

				for (int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++) {
					current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
					row10.CountryCode = current_tSortRow_1_SortIn.CountryCode;
					row10.DrugID = current_tSortRow_1_SortIn.DrugID;
					row10.Unit = current_tSortRow_1_SortIn.Unit;
					row10.Specifics = current_tSortRow_1_SortIn.Specifics;
					row10.Year = current_tSortRow_1_SortIn.Year;
					row10.Measure_Names = current_tSortRow_1_SortIn.Measure_Names;
					row10.Measure_Values = current_tSortRow_1_SortIn.Measure_Values;
					// increase number of line sorted
					nb_line_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn begin ] stop
					 */

					/**
					 * [tSortRow_1_SortIn main ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					tos_count_tSortRow_1_SortIn++;

					/**
					 * [tSortRow_1_SortIn main ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_begin ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_begin ] stop
					 */

					/**
					 * [tDenormalizeSortedRow_1 main ] start
					 */

					currentComponent = "tDenormalizeSortedRow_1";

					// row10
					// row10

					if (execStat) {
						runStat.updateStatOnConnection("row10" + iterateId, 1,
								1);
					}

					currentRowIndex_tDenormalizeSortedRow_1++;
					boolean sameGroup_tDenormalizeSortedRow_1 = true;
					if (flag_tDenormalizeSortedRow_1) {
						flag_tDenormalizeSortedRow_1 = false;
						group_CountryCode_tDenormalizeSortedRow_1 = row10.CountryCode;
						group_DrugID_tDenormalizeSortedRow_1 = row10.DrugID;
						group_Unit_tDenormalizeSortedRow_1 = row10.Unit;
						group_Specifics_tDenormalizeSortedRow_1 = row10.Specifics;
						group_Year_tDenormalizeSortedRow_1 = row10.Year;
						denormalize_Measure_Names_tDenormalizeSortedRow_1
								.append(row10.Measure_Names);
						denormalize_Measure_Values_tDenormalizeSortedRow_1
								.append(row10.Measure_Values);
					} else {
						while (true) {
							if (group_CountryCode_tDenormalizeSortedRow_1 == null) {
								if (row10.CountryCode != null) {
									sameGroup_tDenormalizeSortedRow_1 = false;
									break;
								}
							} else {
								if (group_CountryCode_tDenormalizeSortedRow_1 == null
										|| !group_CountryCode_tDenormalizeSortedRow_1
												.equals(row10.CountryCode)) {
									sameGroup_tDenormalizeSortedRow_1 = false;
									break;
								}
							}
							if (group_DrugID_tDenormalizeSortedRow_1 == null) {
								if (row10.DrugID != null) {
									sameGroup_tDenormalizeSortedRow_1 = false;
									break;
								}
							} else {
								if (group_DrugID_tDenormalizeSortedRow_1 == null
										|| !group_DrugID_tDenormalizeSortedRow_1
												.equals(row10.DrugID)) {
									sameGroup_tDenormalizeSortedRow_1 = false;
									break;
								}
							}
							if (group_Unit_tDenormalizeSortedRow_1 == null) {
								if (row10.Unit != null) {
									sameGroup_tDenormalizeSortedRow_1 = false;
									break;
								}
							} else {
								if (group_Unit_tDenormalizeSortedRow_1 == null
										|| !group_Unit_tDenormalizeSortedRow_1
												.equals(row10.Unit)) {
									sameGroup_tDenormalizeSortedRow_1 = false;
									break;
								}
							}
							if (group_Specifics_tDenormalizeSortedRow_1 == null) {
								if (row10.Specifics != null) {
									sameGroup_tDenormalizeSortedRow_1 = false;
									break;
								}
							} else {
								if (group_Specifics_tDenormalizeSortedRow_1 == null
										|| !group_Specifics_tDenormalizeSortedRow_1
												.equals(row10.Specifics)) {
									sameGroup_tDenormalizeSortedRow_1 = false;
									break;
								}
							}
							if (group_Year_tDenormalizeSortedRow_1 == null) {
								if (row10.Year != null) {
									sameGroup_tDenormalizeSortedRow_1 = false;
									break;
								}
							} else {
								if (group_Year_tDenormalizeSortedRow_1 == null
										|| !group_Year_tDenormalizeSortedRow_1
												.equals(row10.Year)) {
									sameGroup_tDenormalizeSortedRow_1 = false;
									break;
								}
							}
							break;
						}
						if (sameGroup_tDenormalizeSortedRow_1) {
							denormalize_Measure_Names_tDenormalizeSortedRow_1
									.append(";");
							denormalize_Measure_Names_tDenormalizeSortedRow_1
									.append(row10.Measure_Names);
							denormalize_Measure_Values_tDenormalizeSortedRow_1
									.append(";");
							denormalize_Measure_Values_tDenormalizeSortedRow_1
									.append(row10.Measure_Values);
						}
					}

					int tempCount_tDenormalizeSortedRow_1 = -1;
					if (!sameGroup_tDenormalizeSortedRow_1) {
						tempCount_tDenormalizeSortedRow_1++;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].CountryCode = group_CountryCode_tDenormalizeSortedRow_1;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].DrugID = group_DrugID_tDenormalizeSortedRow_1;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].Unit = group_Unit_tDenormalizeSortedRow_1;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].Specifics = group_Specifics_tDenormalizeSortedRow_1;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].Year = group_Year_tDenormalizeSortedRow_1;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].Measure_Names = denormalize_Measure_Names_tDenormalizeSortedRow_1
								.toString();
						denormalize_Measure_Names_tDenormalizeSortedRow_1
								.delete(0,
										denormalize_Measure_Names_tDenormalizeSortedRow_1
												.length());
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].Measure_Values = denormalize_Measure_Values_tDenormalizeSortedRow_1
								.toString();
						denormalize_Measure_Values_tDenormalizeSortedRow_1
								.delete(0,
										denormalize_Measure_Values_tDenormalizeSortedRow_1
												.length());
						group_CountryCode_tDenormalizeSortedRow_1 = row10.CountryCode;
						group_DrugID_tDenormalizeSortedRow_1 = row10.DrugID;
						group_Unit_tDenormalizeSortedRow_1 = row10.Unit;
						group_Specifics_tDenormalizeSortedRow_1 = row10.Specifics;
						group_Year_tDenormalizeSortedRow_1 = row10.Year;
						denormalize_Measure_Names_tDenormalizeSortedRow_1
								.append(row10.Measure_Names);
						denormalize_Measure_Values_tDenormalizeSortedRow_1
								.append(row10.Measure_Values);
					}
					if (currentRowIndex_tDenormalizeSortedRow_1 == ((Integer) globalMap
							.get("tFileInputDelimited_3_NB_LINE"))) {
						tempCount_tDenormalizeSortedRow_1++;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].CountryCode = group_CountryCode_tDenormalizeSortedRow_1;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].DrugID = group_DrugID_tDenormalizeSortedRow_1;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].Unit = group_Unit_tDenormalizeSortedRow_1;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].Specifics = group_Specifics_tDenormalizeSortedRow_1;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].Year = group_Year_tDenormalizeSortedRow_1;
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].Measure_Names = denormalize_Measure_Names_tDenormalizeSortedRow_1
								.toString();
						denormalize_Measure_Names_tDenormalizeSortedRow_1
								.delete(0,
										denormalize_Measure_Names_tDenormalizeSortedRow_1
												.length());
						emmitArray_tDenormalizeSortedRow_1[tempCount_tDenormalizeSortedRow_1].Measure_Values = denormalize_Measure_Values_tDenormalizeSortedRow_1
								.toString();
						denormalize_Measure_Values_tDenormalizeSortedRow_1
								.delete(0,
										denormalize_Measure_Values_tDenormalizeSortedRow_1
												.length());
					}
					for (int i_tDenormalizeSortedRow_1 = 0; i_tDenormalizeSortedRow_1 <= tempCount_tDenormalizeSortedRow_1; i_tDenormalizeSortedRow_1++) {
						row9.CountryCode = emmitArray_tDenormalizeSortedRow_1[i_tDenormalizeSortedRow_1].CountryCode;
						row9.DrugID = emmitArray_tDenormalizeSortedRow_1[i_tDenormalizeSortedRow_1].DrugID;
						row9.Unit = emmitArray_tDenormalizeSortedRow_1[i_tDenormalizeSortedRow_1].Unit;
						row9.Specifics = emmitArray_tDenormalizeSortedRow_1[i_tDenormalizeSortedRow_1].Specifics;
						row9.Year = emmitArray_tDenormalizeSortedRow_1[i_tDenormalizeSortedRow_1].Year;
						row9.Measure_Names = emmitArray_tDenormalizeSortedRow_1[i_tDenormalizeSortedRow_1].Measure_Names;
						row9.Measure_Values = emmitArray_tDenormalizeSortedRow_1[i_tDenormalizeSortedRow_1].Measure_Values;
						nb_line_tDenormalizeSortedRow_1++;

						tos_count_tDenormalizeSortedRow_1++;

						/**
						 * [tDenormalizeSortedRow_1 main ] stop
						 */

						/**
						 * [tDenormalizeSortedRow_1 process_data_begin ] start
						 */

						currentComponent = "tDenormalizeSortedRow_1";

						/**
						 * [tDenormalizeSortedRow_1 process_data_begin ] stop
						 */

						/**
						 * [tExtractDelimitedFields_1 main ] start
						 */

						currentComponent = "tExtractDelimitedFields_1";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						row11 = null;

						row11 = new row11Struct();
						String field_tExtractDelimitedFields_1 = row9.Measure_Values;
						String[] newFields_tExtractDelimitedFields_1 = new String[0];
						try {
							if (field_tExtractDelimitedFields_1 != null) {// C_01
								newFields_tExtractDelimitedFields_1 = field_tExtractDelimitedFields_1
										.split(";", -1);
							}
							int length_tExtractDelimitedFields_1 = newFields_tExtractDelimitedFields_1.length;
							row11.CountryCode = row9.CountryCode;
							row11.DrugID = row9.DrugID;
							row11.Unit = row9.Unit;
							row11.Specifics = row9.Specifics;
							row11.Year = row9.Year;
							row11.Measure_Names = row9.Measure_Names;
							String temp_tExtractDelimitedFields_1 = null;
							row11.To = 0 >= length_tExtractDelimitedFields_1 ? ""
									: newFields_tExtractDelimitedFields_1[0];
							row11.From = 1 >= length_tExtractDelimitedFields_1 ? ""
									: newFields_tExtractDelimitedFields_1[1];
							row11.Typical = 2 >= length_tExtractDelimitedFields_1 ? ""
									: newFields_tExtractDelimitedFields_1[2];
							nb_line_tExtractDelimitedFields_1++;
						} catch (java.lang.Exception ex_tExtractDelimitedFields_1) {
							System.err.println(ex_tExtractDelimitedFields_1
									.getMessage());
							row11 = null;
						}

						tos_count_tExtractDelimitedFields_1++;

						/**
						 * [tExtractDelimitedFields_1 main ] stop
						 */

						/**
						 * [tExtractDelimitedFields_1 process_data_begin ] start
						 */

						currentComponent = "tExtractDelimitedFields_1";

						/**
						 * [tExtractDelimitedFields_1 process_data_begin ] stop
						 */
						// Start of branch "row11"
						if (row11 != null) {

							/**
							 * [tReplace_2 main ] start
							 */

							currentComponent = "tReplace_2";

							// row11
							// row11

							if (execStat) {
								runStat.updateStatOnConnection("row11"
										+ iterateId, 1, 1);
							}

							String searchStr_tReplace_2_1 = "null" + "";
							searchStr_tReplace_2_1 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_2_1
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row11.To = StringUtils.replaceAllStrictly(row11.To,
									searchStr_tReplace_2_1, null, true, false);
							String searchStr_tReplace_2_2 = "null" + "";
							searchStr_tReplace_2_2 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_2_2
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row11.From = StringUtils.replaceAllStrictly(
									row11.From, searchStr_tReplace_2_2, null,
									true, false);
							String searchStr_tReplace_2_3 = "null" + "";
							searchStr_tReplace_2_3 = org.apache.oro.text.GlobCompiler
									.globToPerl5(
											searchStr_tReplace_2_3
													.toCharArray(),
											org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
							row11.Typical = StringUtils.replaceAllStrictly(
									row11.Typical, searchStr_tReplace_2_3,
									null, true, false);
							row13.CountryCode = row11.CountryCode;

							row13.DrugID = row11.DrugID;

							row13.Unit = row11.Unit;

							row13.Specifics = row11.Specifics;

							row13.Year = row11.Year;

							row13.Measure_Names = row11.Measure_Names;

							row13.To = row11.To;

							row13.From = row11.From;

							row13.Typical = row11.Typical;

							nb_line_tReplace_2++;

							tos_count_tReplace_2++;

							/**
							 * [tReplace_2 main ] stop
							 */

							/**
							 * [tReplace_2 process_data_begin ] start
							 */

							currentComponent = "tReplace_2";

							/**
							 * [tReplace_2 process_data_begin ] stop
							 */

							/**
							 * [tConvertType_2 main ] start
							 */

							currentComponent = "tConvertType_2";

							// row13
							// row13

							if (execStat) {
								runStat.updateStatOnConnection("row13"
										+ iterateId, 1, 1);
							}

							row12 = new row12Struct();
							boolean bHasError_tConvertType_2 = false;
							try {
								if ("".equals(row13.CountryCode)) {
									row13.CountryCode = null;
								}
								row12.CountryCode = TypeConvert
										.String2String(row13.CountryCode);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_2 = true;
								System.err.println(e.getMessage());
							}
							try {
								row12.DrugID = TypeConvert
										.Integer2Integer(row13.DrugID);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_2 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row13.Unit)) {
									row13.Unit = null;
								}
								row12.Unit = TypeConvert
										.String2String(row13.Unit);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_2 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row13.Specifics)) {
									row13.Specifics = null;
								}
								row12.Specifics = TypeConvert
										.String2String(row13.Specifics);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_2 = true;
								System.err.println(e.getMessage());
							}
							try {
								row12.Year = TypeConvert
										.Integer2Integer(row13.Year);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_2 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row13.Measure_Names)) {
									row13.Measure_Names = null;
								}
								row12.Measure_Names = TypeConvert
										.String2String(row13.Measure_Names);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_2 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row13.To)) {
									row13.To = null;
								}
								row12.To = TypeConvert.String2Double(row13.To);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_2 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row13.From)) {
									row13.From = null;
								}
								row12.From = TypeConvert
										.String2Double(row13.From);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_2 = true;
								System.err.println(e.getMessage());
							}
							try {
								if ("".equals(row13.Typical)) {
									row13.Typical = null;
								}
								row12.Typical = TypeConvert
										.String2Double(row13.Typical);
							} catch (java.lang.Exception e) {
								bHasError_tConvertType_2 = true;
								System.err.println(e.getMessage());
							}
							if (bHasError_tConvertType_2) {
								row12 = null;
							}

							nb_line_tConvertType_2++;

							tos_count_tConvertType_2++;

							/**
							 * [tConvertType_2 main ] stop
							 */

							/**
							 * [tConvertType_2 process_data_begin ] start
							 */

							currentComponent = "tConvertType_2";

							/**
							 * [tConvertType_2 process_data_begin ] stop
							 */
							// Start of branch "row12"
							if (row12 != null) {

								/**
								 * [tDBOutput_2 main ] start
								 */

								currentComponent = "tDBOutput_2";

								// row12
								// row12

								if (execStat) {
									runStat.updateStatOnConnection("row12"
											+ iterateId, 1, 1);
								}

								whetherReject_tDBOutput_2 = false;
								if (row12.CountryCode == null) {
									pstmt_tDBOutput_2.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(1,
											row12.CountryCode);
								}

								if (row12.DrugID == null) {
									pstmt_tDBOutput_2.setNull(2,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_2.setInt(2, row12.DrugID);
								}

								if (row12.Unit == null) {
									pstmt_tDBOutput_2.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(3, row12.Unit);
								}

								if (row12.Specifics == null) {
									pstmt_tDBOutput_2.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_2.setString(4,
											row12.Specifics);
								}

								if (row12.Year == null) {
									pstmt_tDBOutput_2.setNull(5,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_2.setInt(5, row12.Year);
								}

								if (row12.Typical == null) {
									pstmt_tDBOutput_2.setNull(6,
											java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_2.setDouble(6,
											row12.Typical);
								}

								if (row12.From == null) {
									pstmt_tDBOutput_2.setNull(7,
											java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_2.setDouble(7, row12.From);
								}

								if (row12.To == null) {
									pstmt_tDBOutput_2.setNull(8,
											java.sql.Types.DOUBLE);
								} else {
									pstmt_tDBOutput_2.setDouble(8, row12.To);
								}

								pstmt_tDBOutput_2.addBatch();
								nb_line_tDBOutput_2++;

								batchSizeCounter_tDBOutput_2++;
								if (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
									try {
										int countSum_tDBOutput_2 = 0;
										for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
												.executeBatch()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0
													: 1);
										}
										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
									} catch (java.sql.BatchUpdateException e) {
										throw (e);
									}

									batchSizeCounter_tDBOutput_2 = 0;
								}
								commitCounter_tDBOutput_2++;

								if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

									try {
										int countSum_tDBOutput_2 = 0;
										for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
												.executeBatch()) {
											countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
													: 1);
										}
										insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
									} catch (java.sql.BatchUpdateException e) {
										throw (e);

									}
									conn_tDBOutput_2.commit();
									commitCounter_tDBOutput_2 = 0;

								}

								tos_count_tDBOutput_2++;

								/**
								 * [tDBOutput_2 main ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tDBOutput_2";

								/**
								 * [tDBOutput_2 process_data_end ] stop
								 */

							} // End of branch "row12"

							/**
							 * [tConvertType_2 process_data_end ] start
							 */

							currentComponent = "tConvertType_2";

							/**
							 * [tConvertType_2 process_data_end ] stop
							 */

							/**
							 * [tReplace_2 process_data_end ] start
							 */

							currentComponent = "tReplace_2";

							/**
							 * [tReplace_2 process_data_end ] stop
							 */

						} // End of branch "row11"

						/**
						 * [tExtractDelimitedFields_1 process_data_end ] start
						 */

						currentComponent = "tExtractDelimitedFields_1";

						/**
						 * [tExtractDelimitedFields_1 process_data_end ] stop
						 */
						// end for
					}

					/**
					 * [tDenormalizeSortedRow_1 process_data_end ] start
					 */

					currentComponent = "tDenormalizeSortedRow_1";

					/**
					 * [tDenormalizeSortedRow_1 process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn process_data_end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

					/**
					 * [tSortRow_1_SortIn process_data_end ] stop
					 */

					/**
					 * [tSortRow_1_SortIn end ] start
					 */

					currentVirtualComponent = "tSortRow_1";

					currentComponent = "tSortRow_1_SortIn";

				}

				globalMap.put("tSortRow_1_SortIn_NB_LINE",
						nb_line_tSortRow_1_SortIn);

				ok_Hash.put("tSortRow_1_SortIn", true);
				end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());

				/**
				 * [tSortRow_1_SortIn end ] stop
				 */

				/**
				 * [tDenormalizeSortedRow_1 end ] start
				 */

				currentComponent = "tDenormalizeSortedRow_1";

				globalMap.put("tDenormalizeSortedRow_1_NB_LINE",
						nb_line_tDenormalizeSortedRow_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDenormalizeSortedRow_1", true);
				end_Hash.put("tDenormalizeSortedRow_1",
						System.currentTimeMillis());

				/**
				 * [tDenormalizeSortedRow_1 end ] stop
				 */

				/**
				 * [tExtractDelimitedFields_1 end ] start
				 */

				currentComponent = "tExtractDelimitedFields_1";

				globalMap.put("tExtractDelimitedFields_1_NB_LINE",
						nb_line_tExtractDelimitedFields_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractDelimitedFields_1", true);
				end_Hash.put("tExtractDelimitedFields_1",
						System.currentTimeMillis());

				/**
				 * [tExtractDelimitedFields_1 end ] stop
				 */

				/**
				 * [tReplace_2 end ] start
				 */

				currentComponent = "tReplace_2";

				globalMap.put("tReplace_2_NB_LINE", nb_line_tReplace_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tReplace_2", true);
				end_Hash.put("tReplace_2", System.currentTimeMillis());

				/**
				 * [tReplace_2 end ] stop
				 */

				/**
				 * [tConvertType_2 end ] start
				 */

				currentComponent = "tConvertType_2";

				globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row13" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tConvertType_2", true);
				end_Hash.put("tConvertType_2", System.currentTimeMillis());

				/**
				 * [tConvertType_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (batchSizeCounter_tDBOutput_2 != 0) {
						int countSum_tDBOutput_2 = 0;

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
								.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}
				batchSizeCounter_tDBOutput_2 = 0;

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");

				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0) {

					conn_tDBOutput_2.commit();

				}

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tSortRow_1_SortIn"
			globalMap.remove("tSortRow_1");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row22");

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tSortRow_1_SortOut finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortOut";

				/**
				 * [tSortRow_1_SortOut finally ] stop
				 */

				/**
				 * [tSortRow_1_SortIn finally ] start
				 */

				currentVirtualComponent = "tSortRow_1";

				currentComponent = "tSortRow_1_SortIn";

				/**
				 * [tSortRow_1_SortIn finally ] stop
				 */

				/**
				 * [tDenormalizeSortedRow_1 finally ] start
				 */

				currentComponent = "tDenormalizeSortedRow_1";

				/**
				 * [tDenormalizeSortedRow_1 finally ] stop
				 */

				/**
				 * [tExtractDelimitedFields_1 finally ] start
				 */

				currentComponent = "tExtractDelimitedFields_1";

				/**
				 * [tExtractDelimitedFields_1 finally ] stop
				 */

				/**
				 * [tReplace_2 finally ] start
				 */

				currentComponent = "tReplace_2";

				/**
				 * [tReplace_2 finally ] stop
				 */

				/**
				 * [tConvertType_2 finally ] start
				 */

				currentComponent = "tConvertType_2";

				/**
				 * [tConvertType_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String alpha_2;

		public String getAlpha_2() {
			return this.alpha_2;
		}

		public String alpha_3;

		public String getAlpha_3() {
			return this.alpha_3;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public String iso_3166_2;

		public String getIso_3166_2() {
			return this.iso_3166_2;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String sub_region;

		public String getSub_region() {
			return this.sub_region;
		}

		public String intermediate_region;

		public String getIntermediate_region() {
			return this.intermediate_region;
		}

		public String region_code;

		public String getRegion_code() {
			return this.region_code;
		}

		public String sub_region_code;

		public String getSub_region_code() {
			return this.sub_region_code;
		}

		public String intermediate_region_code;

		public String getIntermediate_region_code() {
			return this.intermediate_region_code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.alpha_2 = readString(dis);

					this.alpha_3 = readString(dis);

					this.country_code = readString(dis);

					this.iso_3166_2 = readString(dis);

					this.region = readString(dis);

					this.sub_region = readString(dis);

					this.intermediate_region = readString(dis);

					this.region_code = readString(dis);

					this.sub_region_code = readString(dis);

					this.intermediate_region_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.alpha_2, dos);

				// String

				writeString(this.alpha_3, dos);

				// String

				writeString(this.country_code, dos);

				// String

				writeString(this.iso_3166_2, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.sub_region, dos);

				// String

				writeString(this.intermediate_region, dos);

				// String

				writeString(this.region_code, dos);

				// String

				writeString(this.sub_region_code, dos);

				// String

				writeString(this.intermediate_region_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",alpha_2=" + alpha_2);
			sb.append(",alpha_3=" + alpha_3);
			sb.append(",country_code=" + country_code);
			sb.append(",iso_3166_2=" + iso_3166_2);
			sb.append(",region=" + region);
			sb.append(",sub_region=" + sub_region);
			sb.append(",intermediate_region=" + intermediate_region);
			sb.append(",region_code=" + region_code);
			sb.append(",sub_region_code=" + sub_region_code);
			sb.append(",intermediate_region_code=" + intermediate_region_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tFileInputDelimited_4 -
				// inputs:(after_tFileInputDelimited_3) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_2 - inputs:(row6,row8,row22) outputs:(outp)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				"/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/countries.csv"/**
				 * 
				 * End field tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('\"');

						csvReadertFileInputDelimited_4.setEscapeChar('\\');

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_4.readNext()) {

								rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
										.getValues();
								if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_4[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_4++;

								}

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('\"');

							csvReadertFileInputDelimited_4.setEscapeChar('\\');

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {
						rowstate_tFileInputDelimited_4.reset();

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						if (rowtFileInputDelimited_4.length == 1
								&& ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						row8 = null;

						row8 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row8 = new row8Struct();
						try {

							char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_4_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row8.name = null;

								row8.alpha_2 = null;

								row8.alpha_3 = null;

								row8.country_code = null;

								row8.iso_3166_2 = null;

								row8.region = null;

								row8.sub_region = null;

								row8.intermediate_region = null;

								row8.region_code = null;

								row8.sub_region_code = null;

								row8.intermediate_region_code = null;

							} else {

								for (int i_tFileInputDelimited_4 = 0; i_tFileInputDelimited_4 < rowtFileInputDelimited_4.length; i_tFileInputDelimited_4++) {
									rowtFileInputDelimited_4[i_tFileInputDelimited_4] = rowtFileInputDelimited_4[i_tFileInputDelimited_4]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.name = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.name = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.alpha_2 = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.alpha_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.alpha_3 = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.alpha_3 = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.country_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.country_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.iso_3166_2 = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.iso_3166_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.region = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.region = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.sub_region = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.sub_region = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.intermediate_region = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.intermediate_region = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 8;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.region_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.region_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 9;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.sub_region_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.sub_region_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 10;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row8.intermediate_region_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row8.intermediate_region_code = null;

								}

							}

							int filedsum = rowtFileInputDelimited_4.length;
							if (filedsum < (11)) {
								throw new java.lang.Exception(
										"Column(s) missing");
							} else if (filedsum > (11)) {
								throw new RuntimeException("Too many columns");
							}

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
						// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tAdvancedHash_row8 main ] start
							 */

							currentComponent = "tAdvancedHash_row8";

							// row8
							// row8

							if (execStat) {
								runStat.updateStatOnConnection("row8"
										+ iterateId, 1, 1);
							}

							row8Struct row8_HashRow = new row8Struct();

							row8_HashRow.name = row8.name;

							row8_HashRow.alpha_2 = row8.alpha_2;

							row8_HashRow.alpha_3 = row8.alpha_3;

							row8_HashRow.country_code = row8.country_code;

							row8_HashRow.iso_3166_2 = row8.iso_3166_2;

							row8_HashRow.region = row8.region;

							row8_HashRow.sub_region = row8.sub_region;

							row8_HashRow.intermediate_region = row8.intermediate_region;

							row8_HashRow.region_code = row8.region_code;

							row8_HashRow.sub_region_code = row8.sub_region_code;

							row8_HashRow.intermediate_region_code = row8.intermediate_region_code;

							tHash_Lookup_row8.put(row8_HashRow);

							tos_count_tAdvancedHash_row8++;

							/**
							 * [tAdvancedHash_row8 main ] stop
							 */

							/**
							 * [tAdvancedHash_row8 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row8";

							/**
							 * [tAdvancedHash_row8 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row8 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row8";

							/**
							 * [tAdvancedHash_row8 process_data_end ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}

				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public Integer Id;

		public Integer getId() {
			return this.Id;
		}

		public String Substance;

		public String getSubstance() {
			return this.Substance;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.Id = readInteger(dis);

					this.Substance = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Id, dos);

				// String

				writeString(this.Substance, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Substance=" + Substance);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Id;

		public Integer getId() {
			return this.Id;
		}

		public String Substance;

		public String getSubstance() {
			return this.Substance;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Id == null) ? 0 : this.Id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row19Struct other = (row19Struct) obj;

			if (this.Id == null) {
				if (other.Id != null)
					return false;

			} else if (!this.Id.equals(other.Id))

				return false;

			return true;
		}

		public void copyDataTo(row19Struct other) {

			other.Id = this.Id;
			other.Substance = this.Substance;

		}

		public void copyKeysDataTo(row19Struct other) {

			other.Id = this.Id;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.Id = readInteger(dis);

					this.Substance = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Id, dos);

				// String

				writeString(this.Substance, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Substance=" + Substance);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();
				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row22";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row22" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tDBOutput_6 - inputs:(row19)
				// outputs:(row22,row22) | target node:tAdvancedHash_row22 -
				// inputs:(row22) outputs:()
				// linked node: tMap_2 - inputs:(row6,row8,row22) outputs:(outp)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct> getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row19" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;

				int rejectedCount_tDBOutput_6 = 0;

				String tableName_tDBOutput_6 = "Substance";
				boolean whetherReject_tDBOutput_6 = false;

				java.util.Calendar calendar_tDBOutput_6 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_6.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_6 = calendar_tDBOutput_6.getTime()
						.getTime();
				calendar_tDBOutput_6.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_6 = calendar_tDBOutput_6.getTime()
						.getTime();
				long date_tDBOutput_6;

				java.sql.Connection conn_tDBOutput_6 = null;
				String dbProperties_tDBOutput_6 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
				String url_tDBOutput_6 = null;
				if (dbProperties_tDBOutput_6 == null
						|| dbProperties_tDBOutput_6.trim().length() == 0) {
					url_tDBOutput_6 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_6 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
					if (!properties_tDBOutput_6
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_6 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_6 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ properties_tDBOutput_6;
				}
				String driverClass_tDBOutput_6 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_6 = "root";

				final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;
				java.lang.Class.forName(driverClass_tDBOutput_6);

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(
						url_tDBOutput_6, dbUser_tDBOutput_6, dbPwd_tDBOutput_6);

				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;

				int count_tDBOutput_6 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_6 = conn_tDBOutput_6
						.getMetaData();
				boolean whetherExist_tDBOutput_6 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_6 = dbMetaData_tDBOutput_6
						.getTables("drugs", null, null,
								new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_6.next()) {
						String table_tDBOutput_6 = rsTable_tDBOutput_6
								.getString("TABLE_NAME");
						if (table_tDBOutput_6.equalsIgnoreCase("Substance")) {
							whetherExist_tDBOutput_6 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_6) {
					try (java.sql.Statement stmtDrop_tDBOutput_6 = conn_tDBOutput_6
							.createStatement()) {
						stmtDrop_tDBOutput_6.execute("DROP TABLE `"
								+ tableName_tDBOutput_6 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_6 = conn_tDBOutput_6
						.createStatement()) {
					stmtCreate_tDBOutput_6
							.execute("CREATE TABLE `"
									+ tableName_tDBOutput_6
									+ "`(`Id` INT(2)  ,`Name` VARCHAR(14)  ,primary key(`Id`))");
				}

				String insert_tDBOutput_6 = "INSERT INTO `" + "Substance"
						+ "` (`Id`,`Name`) VALUES (?,?)";
				int batchSize_tDBOutput_6 = 100;
				int batchSizeCounter_tDBOutput_6 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6
						.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				try {

					Object filename_tFileInputDelimited_5 = "/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/substances.csv";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0
								|| random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/substances.csv",
								"US-ASCII", ",", "\n", false, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null
							&& fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						row19 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row19 = new row19Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_5 = 0;

							temp = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									row19.Id = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Id", "row19",
															temp,
															ex_tFileInputDelimited_5),
													ex_tFileInputDelimited_5));
								}

							} else {

								row19.Id = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 1;

							row19.Substance = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row19 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
						// Start of branch "row19"
						if (row19 != null) {

							/**
							 * [tDBOutput_6 main ] start
							 */

							currentComponent = "tDBOutput_6";

							// row19
							// row19

							if (execStat) {
								runStat.updateStatOnConnection("row19"
										+ iterateId, 1, 1);
							}

							row22 = null;
							row22 = null;
							whetherReject_tDBOutput_6 = false;
							if (row19.Id == null) {
								pstmt_tDBOutput_6.setNull(1,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_6.setInt(1, row19.Id);
							}

							if (row19.Substance == null) {
								pstmt_tDBOutput_6.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_6.setString(2, row19.Substance);
							}

							pstmt_tDBOutput_6.addBatch();
							nb_line_tDBOutput_6++;

							batchSizeCounter_tDBOutput_6++;
							if (!whetherReject_tDBOutput_6) {
								row22 = new row22Struct();
								row22.Id = row19.Id;
								row22.Substance = row19.Substance;
								row22 = new row22Struct();
								row22.Id = row19.Id;
								row22.Substance = row19.Substance;
							}
							if (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6) {
								try {
									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
											.executeBatch()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED ? 0
												: 1);
									}
									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
												: countEach_tDBOutput_6);
									}
									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_6 = 0;
							}
							commitCounter_tDBOutput_6++;

							if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {

								try {
									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
											.executeBatch()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_6 = 0;
									for (int countEach_tDBOutput_6 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
												: countEach_tDBOutput_6);
									}
									insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_6.commit();
								commitCounter_tDBOutput_6 = 0;

							}

							tos_count_tDBOutput_6++;

							/**
							 * [tDBOutput_6 main ] stop
							 */

							/**
							 * [tDBOutput_6 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_6";

							/**
							 * [tDBOutput_6 process_data_begin ] stop
							 */
							// Start of branch "row22"
							if (row22 != null) {

								/**
								 * [tAdvancedHash_row22 main ] start
								 */

								currentComponent = "tAdvancedHash_row22";

								// row22
								// row22

								if (execStat) {
									runStat.updateStatOnConnection("row22"
											+ iterateId, 1, 1);
								}

								row22Struct row22_HashRow = new row22Struct();

								row22_HashRow.Id = row22.Id;

								row22_HashRow.Substance = row22.Substance;

								tHash_Lookup_row22.put(row22_HashRow);

								tos_count_tAdvancedHash_row22++;

								/**
								 * [tAdvancedHash_row22 main ] stop
								 */

								/**
								 * [tAdvancedHash_row22 process_data_begin ]
								 * start
								 */

								currentComponent = "tAdvancedHash_row22";

								/**
								 * [tAdvancedHash_row22 process_data_begin ]
								 * stop
								 */

								/**
								 * [tAdvancedHash_row22 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row22";

								/**
								 * [tAdvancedHash_row22 process_data_end ] stop
								 */

							} // End of branch "row22"

							/**
							 * [tDBOutput_6 process_data_end ] start
							 */

							currentComponent = "tDBOutput_6";

							/**
							 * [tDBOutput_6 process_data_end ] stop
							 */

						} // End of branch "row19"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/substances.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (batchSizeCounter_tDBOutput_6 != 0) {
						int countSum_tDBOutput_6 = 0;

						for (int countEach_tDBOutput_6 : pstmt_tDBOutput_6
								.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_6 = 0;
					for (int countEach_tDBOutput_6 : e.getUpdateCounts()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0
								: countEach_tDBOutput_6);
					}

					insertedCount_tDBOutput_6 += countSum_tDBOutput_6;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_6 = 0;

				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");

				}
				resourceMap.put("statementClosed_tDBOutput_6", true);
				if (commitCounter_tDBOutput_6 > 0) {

					conn_tDBOutput_6.commit();

				}

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6
						+ deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6
						+ updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6
						+ insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6
						+ rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row19" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row22" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row22 finally ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				/**
				 * [tAdvancedHash_row22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class out4Struct implements
			routines.system.IPersistableRow<out4Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public int Year;

		public int getYear() {
			return this.Year;
		}

		public String Amount;

		public String getAmount() {
			return this.Amount;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CountryCode == null) ? 0 : this.CountryCode
								.hashCode());

				result = prime * result + (int) this.Year;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out4Struct other = (out4Struct) obj;

			if (this.CountryCode == null) {
				if (other.CountryCode != null)
					return false;

			} else if (!this.CountryCode.equals(other.CountryCode))

				return false;

			if (this.Year != other.Year)
				return false;

			return true;
		}

		public void copyDataTo(out4Struct other) {

			other.CountryCode = this.CountryCode;
			other.Year = this.Year;
			other.Amount = this.Amount;

		}

		public void copyKeysDataTo(out4Struct other) {

			other.CountryCode = this.CountryCode;
			other.Year = this.Year;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.CountryCode = readString(dis);

					this.Year = dis.readInt();

					this.Amount = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryCode, dos);

				// int

				dos.writeInt(this.Year);

				// String

				writeString(this.Amount, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryCode=" + CountryCode);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",Amount=" + Amount);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CountryCode,
					other.CountryCode);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Year, other.Year);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Amount20102017;

		public String getAmount20102017() {
			return this.Amount20102017;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.CountryCode = readString(dis);

					this.Amount20102017 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Amount20102017, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryCode=" + CountryCode);
			sb.append(",Amount20102017=" + Amount20102017);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out3Struct implements
			routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CountryCode;

		public String getCountryCode() {
			return this.CountryCode;
		}

		public String Amount20102017;

		public String getAmount20102017() {
			return this.Amount20102017;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.CountryCode == null) ? 0 : this.CountryCode
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out3Struct other = (out3Struct) obj;

			if (this.CountryCode == null) {
				if (other.CountryCode != null)
					return false;

			} else if (!this.CountryCode.equals(other.CountryCode))

				return false;

			return true;
		}

		public void copyDataTo(out3Struct other) {

			other.CountryCode = this.CountryCode;
			other.Amount20102017 = this.Amount20102017;

		}

		public void copyKeysDataTo(out3Struct other) {

			other.CountryCode = this.CountryCode;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.CountryCode = readString(dis);

					this.Amount20102017 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CountryCode, dos);

				// String

				writeString(this.Amount20102017, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CountryCode=" + CountryCode);
			sb.append(",Amount20102017=" + Amount20102017);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CountryCode,
					other.CountryCode);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Amount20102017;

		public String getAmount20102017() {
			return this.Amount20102017;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Amount20102017 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Amount20102017, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Country=" + Country);
			sb.append(",Amount20102017=" + Amount20102017);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_6Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_6Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Amount20102017;

		public String getAmount20102017() {
			return this.Amount20102017;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.Country == null) ? 0 : this.Country.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_6Struct other = (after_tFileInputDelimited_6Struct) obj;

			if (this.Country == null) {
				if (other.Country != null)
					return false;

			} else if (!this.Country.equals(other.Country))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_6Struct other) {

			other.Country = this.Country;
			other.Amount20102017 = this.Amount20102017;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_6Struct other) {

			other.Country = this.Country;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Amount20102017 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Amount20102017, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Country=" + Country);
			sb.append(",Amount20102017=" + Amount20102017);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Country, other.Country);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_7Process(globalMap);

				row23Struct row23 = new row23Struct();
				out3Struct out3 = new out3Struct();
				row26Struct row26 = new row26Struct();
				out4Struct out4 = new out4Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out4" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_7 = 0;

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;

				int rejectedCount_tDBOutput_7 = 0;

				String tableName_tDBOutput_7 = "PurchasingPower";
				boolean whetherReject_tDBOutput_7 = false;

				java.util.Calendar calendar_tDBOutput_7 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_7.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_7 = calendar_tDBOutput_7.getTime()
						.getTime();
				calendar_tDBOutput_7.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_7 = calendar_tDBOutput_7.getTime()
						.getTime();
				long date_tDBOutput_7;

				java.sql.Connection conn_tDBOutput_7 = null;
				String dbProperties_tDBOutput_7 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
				String url_tDBOutput_7 = null;
				if (dbProperties_tDBOutput_7 == null
						|| dbProperties_tDBOutput_7.trim().length() == 0) {
					url_tDBOutput_7 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_7 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
					if (!properties_tDBOutput_7
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_7 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_7 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ properties_tDBOutput_7;
				}
				String driverClass_tDBOutput_7 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_7 = "root";

				final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;
				java.lang.Class.forName(driverClass_tDBOutput_7);

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(
						url_tDBOutput_7, dbUser_tDBOutput_7, dbPwd_tDBOutput_7);

				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;

				int count_tDBOutput_7 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_7 = conn_tDBOutput_7
						.getMetaData();
				boolean whetherExist_tDBOutput_7 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_7 = dbMetaData_tDBOutput_7
						.getTables("drugs", null, null,
								new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_7.next()) {
						String table_tDBOutput_7 = rsTable_tDBOutput_7
								.getString("TABLE_NAME");
						if (table_tDBOutput_7
								.equalsIgnoreCase("PurchasingPower")) {
							whetherExist_tDBOutput_7 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_7) {
					try (java.sql.Statement stmtDrop_tDBOutput_7 = conn_tDBOutput_7
							.createStatement()) {
						stmtDrop_tDBOutput_7.execute("DROP TABLE `"
								+ tableName_tDBOutput_7 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_7 = conn_tDBOutput_7
						.createStatement()) {
					stmtCreate_tDBOutput_7
							.execute("CREATE TABLE `"
									+ tableName_tDBOutput_7
									+ "`(`CountryCode` VARCHAR(2)  ,`Year` INT(0)   not null ,`Amount` INT(47)  ,primary key(`CountryCode`,`Year`))");
				}

				String insert_tDBOutput_7 = "INSERT INTO `" + "PurchasingPower"
						+ "` (`CountryCode`,`Year`,`Amount`) VALUES (?,?,?)";
				int batchSize_tDBOutput_7 = 100;
				int batchSizeCounter_tDBOutput_7 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7
						.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row26" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
					int Year;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out4Struct out4_tmp = new out4Struct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tNormalize_2 begin ] start
				 */

				ok_Hash.put("tNormalize_2", false);
				start_Hash.put("tNormalize_2", System.currentTimeMillis());

				currentComponent = "tNormalize_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("out3" + iterateId, 0, 0);

					}
				}

				int tos_count_tNormalize_2 = 0;

				int nb_line_tNormalize_2 = 0;
				String tmp_tNormalize_2 = null;
				StringBuilder currentRecord_tNormalize_2 = null;
				String[] normalizeRecord_tNormalize_2 = null;
				java.util.Set<String> recordSet_tNormalize_2 = new java.util.HashSet<String>();

				if (((String) "!").length() == 0) {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				/**
				 * [tNormalize_2 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row23" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) globalMap
						.get("tHash_Lookup_row24"));

				tHash_Lookup_row24.initGet();

				row24Struct row24HashKey = new row24Struct();
				row24Struct row24Default = new row24Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out3Struct out3_tmp = new out3Struct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				try {

					Object filename_tFileInputDelimited_6 = "/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/average_wage_year.csv";
					if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
						if (footer_value_tFileInputDelimited_6 > 0
								|| random_value_tFileInputDelimited_6 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
								"/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/average_wage_year.csv",
								"US-ASCII", ";", "\n", false, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_6 != null
							&& fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();

						row23 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row23 = new row23Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_6 = 0;

							columnIndexWithD_tFileInputDelimited_6 = 0;

							row23.Country = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							columnIndexWithD_tFileInputDelimited_6 = 1;

							row23.Amount20102017 = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							if (rowstate_tFileInputDelimited_6.getException() != null) {
								throw rowstate_tFileInputDelimited_6
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row23 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */

						/**
						 * [tFileInputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_begin ] stop
						 */
						// Start of branch "row23"
						if (row23 != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							// row23
							// row23

							if (execStat) {
								runStat.updateStatOnConnection("row23"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row24"
							// /////////////////////////////////////////////

							boolean forceLooprow24 = false;

							row24Struct row24ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								tHash_Lookup_row24.lookup(row24HashKey);

								if (!tHash_Lookup_row24.hasNext()) { // G_TM_M_090

									forceLooprow24 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow24 = true;
							} // G 21

							row24Struct row24 = null;

							while ((tHash_Lookup_row24 != null && tHash_Lookup_row24
									.hasNext()) || forceLooprow24) { // G_TM_M_043

								// CALL close loop of lookup 'row24'

								row24Struct fromLookup_row24 = null;
								row24 = row24Default;

								if (!forceLooprow24) { // G 46

									fromLookup_row24 = tHash_Lookup_row24
											.next();

									if (fromLookup_row24 != null) {
										row24 = fromLookup_row24;
									}

								} // G 46

								forceLooprow24 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
									// ###############################
									// # Output tables

									out3 = null;

									// # Output table : 'out3'
									// # Filter conditions
									if (

									(row24.name.equalsIgnoreCase(row23.Country)
											|| row24.name
													.toLowerCase()
													.startsWith(
															row23.Country
																	.toLowerCase()) || row23.Country
											.toLowerCase().startsWith(
													row24.name.toLowerCase()))

									) {
										out3_tmp.CountryCode = row24.alpha_2;
										out3_tmp.Amount20102017 = row23.Amount20102017;
										out3 = out3_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_6 = false;

								tos_count_tMap_6++;

								/**
								 * [tMap_6 main ] stop
								 */

								/**
								 * [tMap_6 process_data_begin ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_begin ] stop
								 */
								// Start of branch "out3"
								if (out3 != null) {

									/**
									 * [tNormalize_2 main ] start
									 */

									currentComponent = "tNormalize_2";

									// out3
									// out3

									if (execStat) {
										runStat.updateStatOnConnection("out3"
												+ iterateId, 1, 1);
									}

									normalizeRecord_tNormalize_2 = new String[1];
									if (out3.Amount20102017 != null) {
										if ("".equals(out3.Amount20102017)) {
											normalizeRecord_tNormalize_2[0] = "";
										} else {

											normalizeRecord_tNormalize_2 = out3.Amount20102017
													.split("!", -1);

										}
									}
									int lastNoEmptyIndex_tNormalize_2 = normalizeRecord_tNormalize_2.length;

									for (int i_tNormalize_2 = 0; i_tNormalize_2 < lastNoEmptyIndex_tNormalize_2; i_tNormalize_2++) {

										currentRecord_tNormalize_2 = new StringBuilder();
										nb_line_tNormalize_2++;

										row26.CountryCode = out3.CountryCode;

										row26.Amount20102017 = normalizeRecord_tNormalize_2[i_tNormalize_2];

										tos_count_tNormalize_2++;

										/**
										 * [tNormalize_2 main ] stop
										 */

										/**
										 * [tNormalize_2 process_data_begin ]
										 * start
										 */

										currentComponent = "tNormalize_2";

										/**
										 * [tNormalize_2 process_data_begin ]
										 * stop
										 */

										/**
										 * [tMap_4 main ] start
										 */

										currentComponent = "tMap_4";

										// row26
										// row26

										if (execStat) {
											runStat.updateStatOnConnection(
													"row26" + iterateId, 1, 1);
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_4 = false;
										boolean mainRowRejected_tMap_4 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_4__Struct Var = Var__tMap_4;
											Var.Year = Numeric.sequence(
													row26.CountryCode + "",
													2010, 1);// ###############################
											// ###############################
											// # Output tables

											out4 = null;

											// # Output table : 'out4'
											out4_tmp.CountryCode = row26.CountryCode;
											out4_tmp.Year = Var.Year;
											out4_tmp.Amount = row26.Amount20102017;
											out4 = out4_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_4 = false;

										tos_count_tMap_4++;

										/**
										 * [tMap_4 main ] stop
										 */

										/**
										 * [tMap_4 process_data_begin ] start
										 */

										currentComponent = "tMap_4";

										/**
										 * [tMap_4 process_data_begin ] stop
										 */
										// Start of branch "out4"
										if (out4 != null) {

											/**
											 * [tDBOutput_7 main ] start
											 */

											currentComponent = "tDBOutput_7";

											// out4
											// out4

											if (execStat) {
												runStat.updateStatOnConnection(
														"out4" + iterateId, 1,
														1);
											}

											whetherReject_tDBOutput_7 = false;
											if (out4.CountryCode == null) {
												pstmt_tDBOutput_7.setNull(1,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_7.setString(1,
														out4.CountryCode);
											}

											pstmt_tDBOutput_7.setInt(2,
													out4.Year);

											if (out4.Amount == null) {
												pstmt_tDBOutput_7.setNull(3,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_7.setString(3,
														out4.Amount);
											}

											pstmt_tDBOutput_7.addBatch();
											nb_line_tDBOutput_7++;

											batchSizeCounter_tDBOutput_7++;
											if (batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7) {
												try {
													int countSum_tDBOutput_7 = 0;
													for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
															.executeBatch()) {
														countSum_tDBOutput_7 += (countEach_tDBOutput_7 == java.sql.Statement.EXECUTE_FAILED ? 0
																: 1);
													}
													insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_7 = 0;
													for (int countEach_tDBOutput_7 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
																: countEach_tDBOutput_7);
													}
													insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
													System.err.println(e
															.getMessage());
												}

												batchSizeCounter_tDBOutput_7 = 0;
											}
											commitCounter_tDBOutput_7++;

											if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {

												try {
													int countSum_tDBOutput_7 = 0;
													for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
															.executeBatch()) {
														countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
																: 1);
													}
													insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_7 = 0;
													for (int countEach_tDBOutput_7 : e
															.getUpdateCounts()) {
														countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
																: countEach_tDBOutput_7);
													}
													insertedCount_tDBOutput_7 += countSum_tDBOutput_7;
													System.err.println(e
															.getMessage());

												}
												conn_tDBOutput_7.commit();
												commitCounter_tDBOutput_7 = 0;

											}

											tos_count_tDBOutput_7++;

											/**
											 * [tDBOutput_7 main ] stop
											 */

											/**
											 * [tDBOutput_7 process_data_begin ]
											 * start
											 */

											currentComponent = "tDBOutput_7";

											/**
											 * [tDBOutput_7 process_data_begin ]
											 * stop
											 */

											/**
											 * [tDBOutput_7 process_data_end ]
											 * start
											 */

											currentComponent = "tDBOutput_7";

											/**
											 * [tDBOutput_7 process_data_end ]
											 * stop
											 */

										} // End of branch "out4"

										/**
										 * [tMap_4 process_data_end ] start
										 */

										currentComponent = "tMap_4";

										/**
										 * [tMap_4 process_data_end ] stop
										 */
										// end for
									}

									/**
									 * [tNormalize_2 process_data_end ] start
									 */

									currentComponent = "tNormalize_2";

									/**
									 * [tNormalize_2 process_data_end ] stop
									 */

								} // End of branch "out3"

							} // close loop of lookup 'row24' // G_TM_M_043

							/**
							 * [tMap_6 process_data_end ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_end ] stop
							 */

						} // End of branch "row23"

						/**
						 * [tFileInputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

					}
				} finally {
					if (!((Object) ("/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/average_wage_year.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_6 != null) {
							fid_tFileInputDelimited_6.close();
						}
					}
					if (fid_tFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								fid_tFileInputDelimited_6.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row24 != null) {
					tHash_Lookup_row24.endGet();
				}
				globalMap.remove("tHash_Lookup_row24");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row23" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tNormalize_2 end ] start
				 */

				currentComponent = "tNormalize_2";

				globalMap.put("tNormalize_2_NB_LINE", nb_line_tNormalize_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tNormalize_2", true);
				end_Hash.put("tNormalize_2", System.currentTimeMillis());

				/**
				 * [tNormalize_2 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row26" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (batchSizeCounter_tDBOutput_7 != 0) {
						int countSum_tDBOutput_7 = 0;

						for (int countEach_tDBOutput_7 : pstmt_tDBOutput_7
								.executeBatch()) {
							countSum_tDBOutput_7 += (countEach_tDBOutput_7 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_7 = 0;
					for (int countEach_tDBOutput_7 : e.getUpdateCounts()) {
						countSum_tDBOutput_7 += (countEach_tDBOutput_7 < 0 ? 0
								: countEach_tDBOutput_7);
					}

					insertedCount_tDBOutput_7 += countSum_tDBOutput_7;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_7 = 0;

				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");

				}
				resourceMap.put("statementClosed_tDBOutput_7", true);
				if (commitCounter_tDBOutput_7 > 0) {

					conn_tDBOutput_7.commit();

				}

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7
						+ deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7
						+ updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7
						+ insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7
						+ rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_7);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("out4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row24");

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tNormalize_2 finally ] start
				 */

				currentComponent = "tNormalize_2";

				/**
				 * [tNormalize_2 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
						if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_7")) != null) {
							pstmtToClose_tDBOutput_7.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_7") == null) {
						java.sql.Connection ctn_tDBOutput_7 = null;
						if ((ctn_tDBOutput_7 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_7")) != null) {
							try {
								ctn_tDBOutput_7.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
								String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
										+ sqlEx_tDBOutput_7.getMessage();
								System.err.println(errorMessage_tDBOutput_7);
							}
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];

		public String name;

		public String getName() {
			return this.name;
		}

		public String alpha_2;

		public String getAlpha_2() {
			return this.alpha_2;
		}

		public String alpha_3;

		public String getAlpha_3() {
			return this.alpha_3;
		}

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public String iso_3166_2;

		public String getIso_3166_2() {
			return this.iso_3166_2;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String sub_region;

		public String getSub_region() {
			return this.sub_region;
		}

		public String intermediate_region;

		public String getIntermediate_region() {
			return this.intermediate_region;
		}

		public String region_code;

		public String getRegion_code() {
			return this.region_code;
		}

		public String sub_region_code;

		public String getSub_region_code() {
			return this.sub_region_code;
		}

		public String intermediate_region_code;

		public String getIntermediate_region_code() {
			return this.intermediate_region_code;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.name = readString(dis);

					this.alpha_2 = readString(dis);

					this.alpha_3 = readString(dis);

					this.country_code = readString(dis);

					this.iso_3166_2 = readString(dis);

					this.region = readString(dis);

					this.sub_region = readString(dis);

					this.intermediate_region = readString(dis);

					this.region_code = readString(dis);

					this.sub_region_code = readString(dis);

					this.intermediate_region_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.name, dos);

				// String

				writeString(this.alpha_2, dos);

				// String

				writeString(this.alpha_3, dos);

				// String

				writeString(this.country_code, dos);

				// String

				writeString(this.iso_3166_2, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.sub_region, dos);

				// String

				writeString(this.intermediate_region, dos);

				// String

				writeString(this.region_code, dos);

				// String

				writeString(this.sub_region_code, dos);

				// String

				writeString(this.intermediate_region_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("name=" + name);
			sb.append(",alpha_2=" + alpha_2);
			sb.append(",alpha_3=" + alpha_3);
			sb.append(",country_code=" + country_code);
			sb.append(",iso_3166_2=" + iso_3166_2);
			sb.append(",region=" + region);
			sb.append(",sub_region=" + sub_region);
			sb.append(",intermediate_region=" + intermediate_region);
			sb.append(",region_code=" + region_code);
			sb.append(",sub_region_code=" + sub_region_code);
			sb.append(",intermediate_region_code=" + intermediate_region_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				/**
				 * [tAdvancedHash_row24 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row24", false);
				start_Hash.put("tAdvancedHash_row24",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row24";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row24" + iterateId, 0,
								0);

					}
				}

				int tos_count_tAdvancedHash_row24 = 0;

				// connection name:row24
				// source node:tFileInputDelimited_7 -
				// inputs:(after_tFileInputDelimited_6) outputs:(row24,row24) |
				// target node:tAdvancedHash_row24 - inputs:(row24) outputs:()
				// linked node: tMap_6 - inputs:(row23,row24) outputs:(out3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row24Struct> getLookup(matchingModeEnum_row24);

				globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);

				/**
				 * [tAdvancedHash_row24 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;

				char fieldSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_7 = ((String) ",")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_7 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_7 = /**
				 * Start field
				 * tFileInputDelimited_7:FILENAME
				 */
				"/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/countries.csv"/**
				 * 
				 * End field tFileInputDelimited_7:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;

				try {

					String[] rowtFileInputDelimited_7 = null;
					int currentLinetFileInputDelimited_7 = 0;
					int outputLinetFileInputDelimited_7 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0;
							if (footer_value_tFileInputDelimited_7 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_7,
									fieldSeparator_tFileInputDelimited_7[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_7)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_7[0]);
						}

						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
							csvReadertFileInputDelimited_7.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_7[0]);

						csvReadertFileInputDelimited_7.setQuoteChar('\"');

						csvReadertFileInputDelimited_7.setEscapeChar('\\');

						if (footer_tFileInputDelimited_7 > 0) {
							for (totalLinetFileInputDelimited_7 = 0; totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
							csvReadertFileInputDelimited_7
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_7.readNext()) {

								rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
										.getValues();
								if (!(rowtFileInputDelimited_7.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_7[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_7++;

								}

							}
							int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7
									- footer_tFileInputDelimited_7 < 0 ? 0
									: totalLinetFileInputDelimited_7
											- footer_tFileInputDelimited_7;
							if (lastLinetFileInputDelimited_7 > 0) {
								lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7 ? lastLinetFileInputDelimited_7
										: lastLineTemptFileInputDelimited_7;
							} else {
								lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
							}

							csvReadertFileInputDelimited_7.close();
							if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_7,
										fieldSeparator_tFileInputDelimited_7[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_7)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_7[0]);
							}
							csvReadertFileInputDelimited_7
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
								csvReadertFileInputDelimited_7
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_7[0]);

							csvReadertFileInputDelimited_7.setQuoteChar('\"');

							csvReadertFileInputDelimited_7.setEscapeChar('\\');

						}

						if (limittFileInputDelimited_7 != 0) {
							for (currentLinetFileInputDelimited_7 = 0; currentLinetFileInputDelimited_7 < 1; currentLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
						}
						csvReadertFileInputDelimited_7
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_7 != 0
							&& csvReadertFileInputDelimited_7 != null
							&& csvReadertFileInputDelimited_7.readNext()) {
						rowstate_tFileInputDelimited_7.reset();

						rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7
								.getValues();

						if (rowtFileInputDelimited_7.length == 1
								&& ("\015").equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_7++;

						if (lastLinetFileInputDelimited_7 > -1
								&& currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
							break;
						}
						outputLinetFileInputDelimited_7++;
						if (limittFileInputDelimited_7 > 0
								&& outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
							break;
						}

						row24 = null;

						row24 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row24 = new row24Struct();
						try {

							char fieldSeparator_tFileInputDelimited_7_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_7_ListType = ((String) ",")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_7.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_7[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row24.name = null;

								row24.alpha_2 = null;

								row24.alpha_3 = null;

								row24.country_code = null;

								row24.iso_3166_2 = null;

								row24.region = null;

								row24.sub_region = null;

								row24.intermediate_region = null;

								row24.region_code = null;

								row24.sub_region_code = null;

								row24.intermediate_region_code = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_7 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_7 = 0;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.name = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.name = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 1;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.alpha_2 = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.alpha_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 2;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.alpha_3 = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.alpha_3 = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 3;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.country_code = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.country_code = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 4;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.iso_3166_2 = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.iso_3166_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 5;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.region = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.region = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 6;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.sub_region = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.sub_region = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 7;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.intermediate_region = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.intermediate_region = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 8;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.region_code = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.region_code = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 9;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.sub_region_code = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.sub_region_code = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 10;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row24.intermediate_region_code = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row24.intermediate_region_code = null;

								}

							}

							if (rowstate_tFileInputDelimited_7.getException() != null) {
								throw rowstate_tFileInputDelimited_7
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row24 = null;

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */

						/**
						 * [tFileInputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_begin ] stop
						 */
						// Start of branch "row24"
						if (row24 != null) {

							/**
							 * [tAdvancedHash_row24 main ] start
							 */

							currentComponent = "tAdvancedHash_row24";

							// row24
							// row24

							if (execStat) {
								runStat.updateStatOnConnection("row24"
										+ iterateId, 1, 1);
							}

							row24Struct row24_HashRow = new row24Struct();

							row24_HashRow.name = row24.name;

							row24_HashRow.alpha_2 = row24.alpha_2;

							row24_HashRow.alpha_3 = row24.alpha_3;

							row24_HashRow.country_code = row24.country_code;

							row24_HashRow.iso_3166_2 = row24.iso_3166_2;

							row24_HashRow.region = row24.region;

							row24_HashRow.sub_region = row24.sub_region;

							row24_HashRow.intermediate_region = row24.intermediate_region;

							row24_HashRow.region_code = row24.region_code;

							row24_HashRow.sub_region_code = row24.sub_region_code;

							row24_HashRow.intermediate_region_code = row24.intermediate_region_code;

							tHash_Lookup_row24.put(row24_HashRow);

							tos_count_tAdvancedHash_row24++;

							/**
							 * [tAdvancedHash_row24 main ] stop
							 */

							/**
							 * [tAdvancedHash_row24 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row24";

							/**
							 * [tAdvancedHash_row24 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row24 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row24";

							/**
							 * [tAdvancedHash_row24 process_data_end ] stop
							 */

						} // End of branch "row24"

						/**
						 * [tFileInputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						nb_line_tFileInputDelimited_7++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_7 != null) {
							csvReadertFileInputDelimited_7.close();
						}
					}
					if (csvReadertFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE",
								nb_line_tFileInputDelimited_7);
					}

				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row24 end ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				tHash_Lookup_row24.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row24" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tAdvancedHash_row24", true);
				end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row24 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row24 finally ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				/**
				 * [tAdvancedHash_row24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_DRUGS_import_survey = new byte[0];
		static byte[] commonByteArray_DRUGS_import_survey = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public Integer Year;

		public Integer getYear() {
			return this.Year;
		}

		public String AgeRange;

		public String getAgeRange() {
			return this.AgeRange;
		}

		public Float Income;

		public Float getIncome() {
			return this.Income;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.Country == null) ? 0 : this.Country.hashCode());

				result = prime * result
						+ ((this.Year == null) ? 0 : this.Year.hashCode());

				result = prime
						* result
						+ ((this.AgeRange == null) ? 0 : this.AgeRange
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row25Struct other = (row25Struct) obj;

			if (this.Country == null) {
				if (other.Country != null)
					return false;

			} else if (!this.Country.equals(other.Country))

				return false;

			if (this.Year == null) {
				if (other.Year != null)
					return false;

			} else if (!this.Year.equals(other.Year))

				return false;

			if (this.AgeRange == null) {
				if (other.AgeRange != null)
					return false;

			} else if (!this.AgeRange.equals(other.AgeRange))

				return false;

			return true;
		}

		public void copyDataTo(row25Struct other) {

			other.Country = this.Country;
			other.Year = this.Year;
			other.AgeRange = this.AgeRange;
			other.Income = this.Income;

		}

		public void copyKeysDataTo(row25Struct other) {

			other.Country = this.Country;
			other.Year = this.Year;
			other.AgeRange = this.AgeRange;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DRUGS_import_survey.length) {
					if (length < 1024
							&& commonByteArray_DRUGS_import_survey.length == 0) {
						commonByteArray_DRUGS_import_survey = new byte[1024];
					} else {
						commonByteArray_DRUGS_import_survey = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DRUGS_import_survey, 0, length);
				strReturn = new String(commonByteArray_DRUGS_import_survey, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DRUGS_import_survey) {

				try {

					int length = 0;

					this.Country = readString(dis);

					this.Year = readInteger(dis);

					this.AgeRange = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Income = null;
					} else {
						this.Income = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Country, dos);

				// Integer

				writeInteger(this.Year, dos);

				// String

				writeString(this.AgeRange, dos);

				// Float

				if (this.Income == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Income);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Country=" + Country);
			sb.append(",Year=" + String.valueOf(Year));
			sb.append(",AgeRange=" + AgeRange);
			sb.append(",Income=" + String.valueOf(Income));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Country, other.Country);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Year, other.Year);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.AgeRange, other.AgeRange);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row25" + iterateId, 0,
								0);

					}
				}

				int tos_count_tDBOutput_8 = 0;

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;

				int rejectedCount_tDBOutput_8 = 0;

				String tableName_tDBOutput_8 = "IncomeByAge";
				boolean whetherReject_tDBOutput_8 = false;

				java.util.Calendar calendar_tDBOutput_8 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_8.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_8 = calendar_tDBOutput_8.getTime()
						.getTime();
				calendar_tDBOutput_8.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_8 = calendar_tDBOutput_8.getTime()
						.getTime();
				long date_tDBOutput_8;

				java.sql.Connection conn_tDBOutput_8 = null;
				String dbProperties_tDBOutput_8 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
				String url_tDBOutput_8 = null;
				if (dbProperties_tDBOutput_8 == null
						|| dbProperties_tDBOutput_8.trim().length() == 0) {
					url_tDBOutput_8 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_8 = "noDatetimeStringSync=true&createDatabaseIfNotExist=true";
					if (!properties_tDBOutput_8
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_8 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_8 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "drugs" + "?"
							+ properties_tDBOutput_8;
				}
				String driverClass_tDBOutput_8 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_8 = "root";

				final String decryptedPassword_tDBOutput_8 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;
				java.lang.Class.forName(driverClass_tDBOutput_8);

				conn_tDBOutput_8 = java.sql.DriverManager.getConnection(
						url_tDBOutput_8, dbUser_tDBOutput_8, dbPwd_tDBOutput_8);

				resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
				conn_tDBOutput_8.setAutoCommit(false);
				int commitEvery_tDBOutput_8 = 10000;
				int commitCounter_tDBOutput_8 = 0;

				int count_tDBOutput_8 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_8 = conn_tDBOutput_8
						.getMetaData();
				boolean whetherExist_tDBOutput_8 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_8 = dbMetaData_tDBOutput_8
						.getTables("drugs", null, null,
								new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_8.next()) {
						String table_tDBOutput_8 = rsTable_tDBOutput_8
								.getString("TABLE_NAME");
						if (table_tDBOutput_8.equalsIgnoreCase("IncomeByAge")) {
							whetherExist_tDBOutput_8 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_8) {
					try (java.sql.Statement stmtDrop_tDBOutput_8 = conn_tDBOutput_8
							.createStatement()) {
						stmtDrop_tDBOutput_8.execute("DROP TABLE `"
								+ tableName_tDBOutput_8 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_8 = conn_tDBOutput_8
						.createStatement()) {
					stmtCreate_tDBOutput_8
							.execute("CREATE TABLE `"
									+ tableName_tDBOutput_8
									+ "`(`CountryCode` VARCHAR(2)  ,`Year` INT(4)  ,`AgeRange` VARCHAR(3)  ,`Income` FLOAT(11,7)  ,primary key(`CountryCode`,`Year`,`AgeRange`))");
				}

				String insert_tDBOutput_8 = "INSERT INTO `"
						+ "IncomeByAge"
						+ "` (`CountryCode`,`Year`,`AgeRange`,`Income`) VALUES (?,?,?,?)";
				int batchSize_tDBOutput_8 = 100;
				int batchSizeCounter_tDBOutput_8 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8
						.prepareStatement(insert_tDBOutput_8);
				resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_8", false);
				start_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_8";

				int tos_count_tFileInputDelimited_8 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_8 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_8 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_8 = null;
				try {

					Object filename_tFileInputDelimited_8 = "/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/salary_age.csv";
					if (filename_tFileInputDelimited_8 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_8 = 0, random_value_tFileInputDelimited_8 = -1;
						if (footer_value_tFileInputDelimited_8 > 0
								|| random_value_tFileInputDelimited_8 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_8 = new org.talend.fileprocess.FileInputDelimited(
								"/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/salary_age.csv",
								"US-ASCII", ";", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_8 != null
							&& fid_tFileInputDelimited_8.nextRecord()) {
						rowstate_tFileInputDelimited_8.reset();

						row25 = null;

						boolean whetherReject_tFileInputDelimited_8 = false;
						row25 = new row25Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_8 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_8 = 0;

							row25.Country = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 1;

							temp = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);
							if (temp.length() > 0) {

								try {

									row25.Year = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_8) {
									rowstate_tFileInputDelimited_8
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Year", "row25",
															temp,
															ex_tFileInputDelimited_8),
													ex_tFileInputDelimited_8));
								}

							} else {

								row25.Year = null;

							}

							columnIndexWithD_tFileInputDelimited_8 = 2;

							row25.AgeRange = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);

							columnIndexWithD_tFileInputDelimited_8 = 3;

							temp = fid_tFileInputDelimited_8
									.get(columnIndexWithD_tFileInputDelimited_8);
							if (temp.length() > 0) {

								try {

									row25.Income = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_8) {
									rowstate_tFileInputDelimited_8
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Income", "row25",
															temp,
															ex_tFileInputDelimited_8),
													ex_tFileInputDelimited_8));
								}

							} else {

								row25.Income = null;

							}

							if (rowstate_tFileInputDelimited_8.getException() != null) {
								throw rowstate_tFileInputDelimited_8
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_8 = true;

							System.err.println(e.getMessage());
							row25 = null;

						}

						/**
						 * [tFileInputDelimited_8 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_8 main ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						tos_count_tFileInputDelimited_8++;

						/**
						 * [tFileInputDelimited_8 main ] stop
						 */

						/**
						 * [tFileInputDelimited_8 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						/**
						 * [tFileInputDelimited_8 process_data_begin ] stop
						 */
						// Start of branch "row25"
						if (row25 != null) {

							/**
							 * [tDBOutput_8 main ] start
							 */

							currentComponent = "tDBOutput_8";

							// row25
							// row25

							if (execStat) {
								runStat.updateStatOnConnection("row25"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_8 = false;
							if (row25.Country == null) {
								pstmt_tDBOutput_8.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_8.setString(1, row25.Country);
							}

							if (row25.Year == null) {
								pstmt_tDBOutput_8.setNull(2,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_8.setInt(2, row25.Year);
							}

							if (row25.AgeRange == null) {
								pstmt_tDBOutput_8.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_8.setString(3, row25.AgeRange);
							}

							if (row25.Income == null) {
								pstmt_tDBOutput_8.setNull(4,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tDBOutput_8.setFloat(4, row25.Income);
							}

							pstmt_tDBOutput_8.addBatch();
							nb_line_tDBOutput_8++;

							batchSizeCounter_tDBOutput_8++;
							if (batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8) {
								try {
									int countSum_tDBOutput_8 = 0;
									for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
											.executeBatch()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 == java.sql.Statement.EXECUTE_FAILED ? 0
												: 1);
									}
									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_8 = 0;
									for (int countEach_tDBOutput_8 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: countEach_tDBOutput_8);
									}
									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_8 = 0;
							}
							commitCounter_tDBOutput_8++;

							if (commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {

								try {
									int countSum_tDBOutput_8 = 0;
									for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
											.executeBatch()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_8 = 0;
									for (int countEach_tDBOutput_8 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
												: countEach_tDBOutput_8);
									}
									insertedCount_tDBOutput_8 += countSum_tDBOutput_8;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_8.commit();
								commitCounter_tDBOutput_8 = 0;

							}

							tos_count_tDBOutput_8++;

							/**
							 * [tDBOutput_8 main ] stop
							 */

							/**
							 * [tDBOutput_8 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_8";

							/**
							 * [tDBOutput_8 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_8 process_data_end ] start
							 */

							currentComponent = "tDBOutput_8";

							/**
							 * [tDBOutput_8 process_data_end ] stop
							 */

						} // End of branch "row25"

						/**
						 * [tFileInputDelimited_8 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

						/**
						 * [tFileInputDelimited_8 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_8 end ] start
						 */

						currentComponent = "tFileInputDelimited_8";

					}
				} finally {
					if (!((Object) ("/home/crisbal/Downloads/TalendDataIntegration/workspace/DRUGS/data/salary_age.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_8 != null) {
							fid_tFileInputDelimited_8.close();
						}
					}
					if (fid_tFileInputDelimited_8 != null) {
						globalMap.put("tFileInputDelimited_8_NB_LINE",
								fid_tFileInputDelimited_8.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_8", true);
				end_Hash.put("tFileInputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_8 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					if (batchSizeCounter_tDBOutput_8 != 0) {
						int countSum_tDBOutput_8 = 0;

						for (int countEach_tDBOutput_8 : pstmt_tDBOutput_8
								.executeBatch()) {
							countSum_tDBOutput_8 += (countEach_tDBOutput_8 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_8 = 0;
					for (int countEach_tDBOutput_8 : e.getUpdateCounts()) {
						countSum_tDBOutput_8 += (countEach_tDBOutput_8 < 0 ? 0
								: countEach_tDBOutput_8);
					}

					insertedCount_tDBOutput_8 += countSum_tDBOutput_8;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_8 = 0;

				if (pstmt_tDBOutput_8 != null) {

					pstmt_tDBOutput_8.close();
					resourceMap.remove("pstmt_tDBOutput_8");

				}
				resourceMap.put("statementClosed_tDBOutput_8", true);
				if (commitCounter_tDBOutput_8 > 0) {

					conn_tDBOutput_8.commit();

				}

				conn_tDBOutput_8.close();

				resourceMap.put("finish_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8
						+ deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8
						+ updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8
						+ insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8
						+ rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_8);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row25" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_8 finally ] start
				 */

				currentComponent = "tFileInputDelimited_8";

				/**
				 * [tFileInputDelimited_8 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
						if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_8")) != null) {
							pstmtToClose_tDBOutput_8.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_8") == null) {
						java.sql.Connection ctn_tDBOutput_8 = null;
						if ((ctn_tDBOutput_8 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_8")) != null) {
							try {
								ctn_tDBOutput_8.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_8) {
								String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :"
										+ sqlEx_tDBOutput_8.getMessage();
								System.err.println(errorMessage_tDBOutput_8);
							}
						}
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final import_survey import_surveyClass = new import_survey();

		int exitCode = import_surveyClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = import_survey.class
					.getClassLoader().getResourceAsStream(
							"drugs/import_survey_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = import_survey.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_3) {
			globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_3.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_6) {
			globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_6.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_8) {
			globalMap.put("tFileInputDelimited_8_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_8.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : import_survey");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 590183 characters generated by Talend Open Studio for Data Integration on the
 * December 28, 2018 11:03:43 AM CET
 ************************************************************************************************/
